
LAB-01-Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002de8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000035c  08002fe8  08002fe8  00012fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003344  08003344  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003344  08003344  00013344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800334c  0800334c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800334c  0800334c  0001334c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003350  08003350  00013350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000070  080033c4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  200001ac  080033c4  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae01  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018f9  00000000  00000000  0002ae9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000379c  00000000  00000000  0002c798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000638  00000000  00000000  0002ff38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000608  00000000  00000000  00030570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bed6  00000000  00000000  00030b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000924f  00000000  00000000  0005ca4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010a16b  00000000  00000000  00065c9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016fe08  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000198c  00000000  00000000  0016fe5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         0000006c  00000000  00000000  001717e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000000e3  00000000  00000000  00171854  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08002fd0 	.word	0x08002fd0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08002fd0 	.word	0x08002fd0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:

//------------------------------------------------------------------------------------
// MAIN Routine
//------------------------------------------------------------------------------------
int main(void)
{
 80005d8:	b510      	push	{r4, lr}
 80005da:	b082      	sub	sp, #8
    Sys_Init(); // This always goes at the top of main (defined in init.c)
 80005dc:	f000 f900 	bl	80007e0 <Sys_Init>

    char choice;
	char in[3];
    int size = 3;

    printf("\033[2J\033[;H"); // Erase screen & move cursor to home position
 80005e0:	4837      	ldr	r0, [pc, #220]	; (80006c0 <main+0xe8>)
 80005e2:	f001 fe01 	bl	80021e8 <iprintf>
    fflush(stdout); // Need to flush stdout after using printf that doesn't end in \n
 80005e6:	4b37      	ldr	r3, [pc, #220]	; (80006c4 <main+0xec>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	6898      	ldr	r0, [r3, #8]
 80005ec:	f001 fbec 	bl	8001dc8 <fflush>
    printf("Test of the printf() function.\n\n");
 80005f0:	4835      	ldr	r0, [pc, #212]	; (80006c8 <main+0xf0>)
 80005f2:	f001 fe95 	bl	8002320 <puts>

    // Need to enable clock for peripheral bus on GPIO Port J
    __HAL_RCC_GPIOJ_CLK_ENABLE(); 	// Through HAL
 80005f6:	4b35      	ldr	r3, [pc, #212]	; (80006cc <main+0xf4>)
 80005f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005fe:	631a      	str	r2, [r3, #48]	; 0x30
 8000600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000602:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000606:	9200      	str	r2, [sp, #0]
 8000608:	9a00      	ldr	r2, [sp, #0]
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOJEN; // or through registers
 800060a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800060c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000610:	631a      	str	r2, [r3, #48]	; 0x30
    //// Below two lines are example on how to access a register by knowing it's memory address
    //volatile uint32_t * RCC_AHB1_CLOCK_ENABLE = (uint32_t*) 0x40023830U; // Enable clock for peripheral bus on GPIO Port J
    //*RCC_AHB1_CLOCK_ENABLE |= 512U; // Bitmask for RCC AHB1 initialization: 0x00000200U or 512U in decimal

    GPIOJ->MODER |= 1024U; //Bitmask for GPIO J Pin 5 initialization (set it to Output mode): 0x00000400U or 1024U in decimal
 8000612:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800061c:	601a      	str	r2, [r3, #0]
    GPIOJ->BSRR = (uint16_t)GPIO_PIN_5; // Turn on Green LED (LED2)
 800061e:	2120      	movs	r1, #32
 8000620:	6199      	str	r1, [r3, #24]
    GPIOJ->BSRR = (uint32_t)GPIO_PIN_5 << 16; // Turn off Green LED (LED2)
 8000622:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000626:	619a      	str	r2, [r3, #24]
    GPIOJ->ODR ^= (uint16_t)GPIO_PIN_5; // Toggle LED2
 8000628:	695a      	ldr	r2, [r3, #20]
 800062a:	404a      	eors	r2, r1
 800062c:	615a      	str	r2, [r3, #20]
// It doesn't get lower level than this!
//    volatile uint32_t * GREENLEDMODER = (uint32_t*) 0x40022400U; // Init GPIO J Pin 5 (LED2 with no Alt. func.) to Output
//    *GREENLEDMODER |= 1024U; // Bitmask for GPIO J Pin 5 initialization: 0x00000400U or 1024U in decimal

    volatile uint32_t * GREENLEDBSRR = (uint32_t*) 0x40022418U; // Address of GPIO J Bit Set/Reset Register
    *GREENLEDBSRR = (uint16_t)0x0020U; // Turn on Green LED (LED2)
 800062e:	3318      	adds	r3, #24
 8000630:	6019      	str	r1, [r3, #0]

    HAL_Delay(1000); // Pause for a second
 8000632:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000636:	f000 fa2d 	bl	8000a94 <HAL_Delay>
 800063a:	e01d      	b.n	8000678 <main+0xa0>
//        HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_SET);         // Turn green LED on (GPIO_PIN_SET == 1)
        *GREENLEDBSRR = (uint16_t)0x0020U; // Turn on Green LED (LED2)
        if (choice == '0')
            return 1;
        else if(choice == '1')
            printf("\r\n\nHere we go again.\r\n\n");
 800063c:	4824      	ldr	r0, [pc, #144]	; (80006d0 <main+0xf8>)
 800063e:	f001 fe6f 	bl	8002320 <puts>
 8000642:	e00c      	b.n	800065e <main+0x86>
            fflush(stdout);
        }
        else
        {
            // inform the user how bright he is
            *GREENLEDBSRR = (uint32_t)0x0020U << 16; // Turn off Green LED (LED2)
 8000644:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <main+0xfc>)
 8000646:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800064a:	601a      	str	r2, [r3, #0]
            printf("\r\nA \"");
 800064c:	4822      	ldr	r0, [pc, #136]	; (80006d8 <main+0x100>)
 800064e:	f001 fdcb 	bl	80021e8 <iprintf>
						putchar(choice);
 8000652:	4620      	mov	r0, r4
 8000654:	f001 fde0 	bl	8002218 <putchar>
//						uart_print(&USB_UART, choice);
            printf("\" is not a valid choice.\r\n\n");
 8000658:	4820      	ldr	r0, [pc, #128]	; (80006dc <main+0x104>)
 800065a:	f001 fe61 	bl	8002320 <puts>
        }

// Messing around with more stuff
				printf("Enter an alphanumeric sequence (press <enter> if you want to send less than %d characters): \r\n", size + 1);
 800065e:	2104      	movs	r1, #4
 8000660:	481f      	ldr	r0, [pc, #124]	; (80006e0 <main+0x108>)
 8000662:	f001 fdc1 	bl	80021e8 <iprintf>
				int a = uart_getline(&USB_UART, in, size);
 8000666:	2203      	movs	r2, #3
 8000668:	a901      	add	r1, sp, #4
 800066a:	481e      	ldr	r0, [pc, #120]	; (80006e4 <main+0x10c>)
 800066c:	f000 f977 	bl	800095e <uart_getline>
 8000670:	4601      	mov	r1, r0
				printf("\r\nuart_getline result: %d\r\n", a);
 8000672:	481d      	ldr	r0, [pc, #116]	; (80006e8 <main+0x110>)
 8000674:	f001 fdb8 	bl	80021e8 <iprintf>
        printf("Hello World!\r\n\n");
 8000678:	481c      	ldr	r0, [pc, #112]	; (80006ec <main+0x114>)
 800067a:	f001 fe51 	bl	8002320 <puts>
        printf("( Welcome to Microprocessor Systems )\r\n\n\n");
 800067e:	481c      	ldr	r0, [pc, #112]	; (80006f0 <main+0x118>)
 8000680:	f001 fe4e 	bl	8002320 <puts>
        printf("1=repeat, 2=clear, 0=quit.\r\n\n"); // Menu of choices
 8000684:	481b      	ldr	r0, [pc, #108]	; (80006f4 <main+0x11c>)
 8000686:	f001 fe4b 	bl	8002320 <puts>
				choice = getchar();
 800068a:	f001 fcc1 	bl	8002010 <getchar>
 800068e:	b2c4      	uxtb	r4, r0
				putchar(choice);
 8000690:	4620      	mov	r0, r4
 8000692:	f001 fdc1 	bl	8002218 <putchar>
        *GREENLEDBSRR = (uint16_t)0x0020U; // Turn on Green LED (LED2)
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <main+0xfc>)
 8000698:	2220      	movs	r2, #32
 800069a:	601a      	str	r2, [r3, #0]
        if (choice == '0')
 800069c:	2c30      	cmp	r4, #48	; 0x30
 800069e:	d00c      	beq.n	80006ba <main+0xe2>
        else if(choice == '1')
 80006a0:	2c31      	cmp	r4, #49	; 0x31
 80006a2:	d0cb      	beq.n	800063c <main+0x64>
        else if(choice == '2')          // clear the screen with <ESC>[2J
 80006a4:	2c32      	cmp	r4, #50	; 0x32
 80006a6:	d1cd      	bne.n	8000644 <main+0x6c>
            printf("\033[2J\033[;H");
 80006a8:	4805      	ldr	r0, [pc, #20]	; (80006c0 <main+0xe8>)
 80006aa:	f001 fd9d 	bl	80021e8 <iprintf>
            fflush(stdout);
 80006ae:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <main+0xec>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	6898      	ldr	r0, [r3, #8]
 80006b4:	f001 fb88 	bl	8001dc8 <fflush>
 80006b8:	e7d1      	b.n	800065e <main+0x86>
		}
}
 80006ba:	2001      	movs	r0, #1
 80006bc:	b002      	add	sp, #8
 80006be:	bd10      	pop	{r4, pc}
 80006c0:	08003000 	.word	0x08003000
 80006c4:	2000000c 	.word	0x2000000c
 80006c8:	0800300c 	.word	0x0800300c
 80006cc:	40023800 	.word	0x40023800
 80006d0:	08003088 	.word	0x08003088
 80006d4:	40022418 	.word	0x40022418
 80006d8:	080030a0 	.word	0x080030a0
 80006dc:	080030a8 	.word	0x080030a8
 80006e0:	080030c4 	.word	0x080030c4
 80006e4:	20000098 	.word	0x20000098
 80006e8:	08003124 	.word	0x08003124
 80006ec:	0800302c 	.word	0x0800302c
 80006f0:	0800303c 	.word	0x0800303c
 80006f4:	08003068 	.word	0x08003068

080006f8 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 80006f8:	b500      	push	{lr}
 80006fa:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006fc:	2301      	movs	r3, #1
 80006fe:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000700:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000704:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000706:	2302      	movs	r3, #2
 8000708:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800070e:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000710:	2219      	movs	r2, #25
 8000712:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000714:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8000718:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800071c:	2309      	movs	r3, #9
 800071e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 8000720:	2307      	movs	r3, #7
 8000722:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000724:	4668      	mov	r0, sp
 8000726:	f000 fb51 	bl	8000dcc <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 800072a:	b100      	cbz	r0, 800072e <SystemClock_Config+0x36>
    while(1) { ; }
 800072c:	e7fe      	b.n	800072c <SystemClock_Config+0x34>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 800072e:	f000 fb0f 	bl	8000d50 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 8000732:	b100      	cbz	r0, 8000736 <SystemClock_Config+0x3e>
    while(1) { ; }
 8000734:	e7fe      	b.n	8000734 <SystemClock_Config+0x3c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000736:	230f      	movs	r3, #15
 8000738:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	2302      	movs	r3, #2
 800073c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000742:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000746:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074c:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800074e:	2107      	movs	r1, #7
 8000750:	a80d      	add	r0, sp, #52	; 0x34
 8000752:	f000 fdad 	bl	80012b0 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 8000756:	b100      	cbz	r0, 800075a <SystemClock_Config+0x62>
    while(1) { ; }
 8000758:	e7fe      	b.n	8000758 <SystemClock_Config+0x60>
  }
}
 800075a:	b013      	add	sp, #76	; 0x4c
 800075c:	f85d fb04 	ldr.w	pc, [sp], #4

08000760 <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 8000760:	b410      	push	{r4}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000762:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000766:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800076a:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <CPU_CACHE_Enable+0x7c>)
 800076c:	2100      	movs	r1, #0
 800076e:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000772:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000776:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800077a:	695a      	ldr	r2, [r3, #20]
 800077c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000780:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000782:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000786:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800078a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800078e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000792:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000796:	f3c0 324e 	ubfx	r2, r0, #13, #15
 800079a:	e000      	b.n	800079e <CPU_CACHE_Enable+0x3e>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 800079c:	461a      	mov	r2, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800079e:	f3c0 01c9 	ubfx	r1, r0, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007a2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80007a6:	ea03 1342 	and.w	r3, r3, r2, lsl #5
 80007aa:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 80007ae:	4c0b      	ldr	r4, [pc, #44]	; (80007dc <CPU_CACHE_Enable+0x7c>)
 80007b0:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways-- != 0U);
 80007b4:	460b      	mov	r3, r1
 80007b6:	3901      	subs	r1, #1
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d1f2      	bne.n	80007a2 <CPU_CACHE_Enable+0x42>
    } while(sets-- != 0U);
 80007bc:	1e53      	subs	r3, r2, #1
 80007be:	2a00      	cmp	r2, #0
 80007c0:	d1ec      	bne.n	800079c <CPU_CACHE_Enable+0x3c>
 80007c2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80007c6:	6963      	ldr	r3, [r4, #20]
 80007c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007cc:	6163      	str	r3, [r4, #20]
 80007ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007d2:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 80007d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <Sys_Init>:

// Unified System Initialization (equivalent of current MPS Sys_Init())
void Sys_Init(void) {
 80007e0:	b508      	push	{r3, lr}
	//Initialize the system
	CPU_CACHE_Enable();		// Enable CPU Caching
 80007e2:	f7ff ffbd 	bl	8000760 <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 80007e6:	f000 f92d 	bl	8000a44 <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 80007ea:	f7ff ff85 	bl	80006f8 <SystemClock_Config>
		- Stop Bit = No Stop bits
		- Parity = None
		- BaudRate = 115200 baud
		- Hardware flow control disabled (RTS and CTS signals)
	*/
	initUart(&USB_UART, 115200, USART1);
 80007ee:	4a03      	ldr	r2, [pc, #12]	; (80007fc <Sys_Init+0x1c>)
 80007f0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80007f4:	4802      	ldr	r0, [pc, #8]	; (8000800 <Sys_Init+0x20>)
 80007f6:	f000 f873 	bl	80008e0 <initUart>
}
 80007fa:	bd08      	pop	{r3, pc}
 80007fc:	40011000 	.word	0x40011000
 8000800:	20000098 	.word	0x20000098

08000804 <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 8000804:	b508      	push	{r3, lr}
  HAL_IncTick();
 8000806:	f000 f933 	bl	8000a70 <HAL_IncTick>
}
 800080a:	bd08      	pop	{r3, pc}

0800080c <HAL_UART_MspInit>:
#include "uart.h"

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 800080c:	b530      	push	{r4, r5, lr}
 800080e:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 8000810:	6803      	ldr	r3, [r0, #0]
 8000812:	4a2e      	ldr	r2, [pc, #184]	; (80008cc <HAL_UART_MspInit+0xc0>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d004      	beq.n	8000822 <HAL_UART_MspInit+0x16>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config

		// Enable UART Clocking
		__USART1_CLK_ENABLE();

	} else if (huart->Instance == USART6) {
 8000818:	4a2d      	ldr	r2, [pc, #180]	; (80008d0 <HAL_UART_MspInit+0xc4>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d02c      	beq.n	8000878 <HAL_UART_MspInit+0x6c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 800081e:	b00b      	add	sp, #44	; 0x2c
 8000820:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 8000822:	4c2c      	ldr	r4, [pc, #176]	; (80008d4 <HAL_UART_MspInit+0xc8>)
 8000824:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000826:	f043 0301 	orr.w	r3, r3, #1
 800082a:	6323      	str	r3, [r4, #48]	; 0x30
 800082c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	9301      	str	r3, [sp, #4]
 8000834:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 8000836:	f44f 7300 	mov.w	r3, #512	; 0x200
 800083a:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800083c:	2302      	movs	r3, #2
 800083e:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000840:	2301      	movs	r3, #1
 8000842:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000844:	2303      	movs	r3, #3
 8000846:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000848:	2307      	movs	r3, #7
 800084a:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 800084c:	4d22      	ldr	r5, [pc, #136]	; (80008d8 <HAL_UART_MspInit+0xcc>)
 800084e:	a905      	add	r1, sp, #20
 8000850:	4628      	mov	r0, r5
 8000852:	f000 f98d 	bl	8000b70 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800085a:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 800085c:	a905      	add	r1, sp, #20
 800085e:	4628      	mov	r0, r5
 8000860:	f000 f986 	bl	8000b70 <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 8000864:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000866:	f043 0310 	orr.w	r3, r3, #16
 800086a:	6463      	str	r3, [r4, #68]	; 0x44
 800086c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800086e:	f003 0310 	and.w	r3, r3, #16
 8000872:	9302      	str	r3, [sp, #8]
 8000874:	9b02      	ldr	r3, [sp, #8]
 8000876:	e7d2      	b.n	800081e <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 8000878:	4c16      	ldr	r4, [pc, #88]	; (80008d4 <HAL_UART_MspInit+0xc8>)
 800087a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800087c:	f043 0304 	orr.w	r3, r3, #4
 8000880:	6323      	str	r3, [r4, #48]	; 0x30
 8000882:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000884:	f003 0304 	and.w	r3, r3, #4
 8000888:	9303      	str	r3, [sp, #12]
 800088a:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 800088c:	2340      	movs	r3, #64	; 0x40
 800088e:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000894:	2301      	movs	r3, #1
 8000896:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000898:	2303      	movs	r3, #3
 800089a:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800089c:	2308      	movs	r3, #8
 800089e:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 80008a0:	4d0e      	ldr	r5, [pc, #56]	; (80008dc <HAL_UART_MspInit+0xd0>)
 80008a2:	a905      	add	r1, sp, #20
 80008a4:	4628      	mov	r0, r5
 80008a6:	f000 f963 	bl	8000b70 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008aa:	2380      	movs	r3, #128	; 0x80
 80008ac:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 80008ae:	a905      	add	r1, sp, #20
 80008b0:	4628      	mov	r0, r5
 80008b2:	f000 f95d 	bl	8000b70 <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 80008b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80008b8:	f043 0320 	orr.w	r3, r3, #32
 80008bc:	6463      	str	r3, [r4, #68]	; 0x44
 80008be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80008c0:	f003 0320 	and.w	r3, r3, #32
 80008c4:	9304      	str	r3, [sp, #16]
 80008c6:	9b04      	ldr	r3, [sp, #16]
}
 80008c8:	e7a9      	b.n	800081e <HAL_UART_MspInit+0x12>
 80008ca:	bf00      	nop
 80008cc:	40011000 	.word	0x40011000
 80008d0:	40011400 	.word	0x40011400
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020000 	.word	0x40020000
 80008dc:	40020800 	.word	0x40020800

080008e0 <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 80008e0:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 80008e2:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 80008e4:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	2200      	movs	r2, #0
 80008e8:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 80008ea:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 80008ec:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 80008ee:	210c      	movs	r1, #12
 80008f0:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80008f2:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 80008f4:	f001 f974 	bl	8001be0 <HAL_UART_Init>
}
 80008f8:	bd08      	pop	{r3, pc}
	...

080008fc <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 80008fc:	b510      	push	{r4, lr}
 80008fe:	4614      	mov	r4, r2
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 8000900:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000904:	b292      	uxth	r2, r2
 8000906:	4802      	ldr	r0, [pc, #8]	; (8000910 <_write+0x14>)
 8000908:	f001 f834 	bl	8001974 <HAL_UART_Transmit>
	return len;
}
 800090c:	4620      	mov	r0, r4
 800090e:	bd10      	pop	{r4, pc}
 8000910:	20000098 	.word	0x20000098

08000914 <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 8000914:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 8000916:	2200      	movs	r2, #0
 8000918:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800091a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800091e:	2201      	movs	r2, #1
 8000920:	4802      	ldr	r0, [pc, #8]	; (800092c <_read+0x18>)
 8000922:	f001 f894 	bl	8001a4e <HAL_UART_Receive>
	return len;
}
 8000926:	2001      	movs	r0, #1
 8000928:	bd08      	pop	{r3, pc}
 800092a:	bf00      	nop
 800092c:	20000098 	.word	0x20000098

08000930 <uart_getchar>:
    HAL_UART_Transmit(huart, (uint8_t*) string, strlen((const char*)string), 1000);
}

// Get one character
// 'echo' means enable (1) or disable (0) echoing of characters
char uart_getchar(UART_HandleTypeDef *huart, uint8_t echo) {
 8000930:	b530      	push	{r4, r5, lr}
 8000932:	b083      	sub	sp, #12
 8000934:	4605      	mov	r5, r0
 8000936:	460c      	mov	r4, r1
	char input[1];
	HAL_UART_Receive(huart, (uint8_t *)input, 1, HAL_MAX_DELAY);
 8000938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800093c:	2201      	movs	r2, #1
 800093e:	a901      	add	r1, sp, #4
 8000940:	f001 f885 	bl	8001a4e <HAL_UART_Receive>
	if (echo) HAL_UART_Transmit(huart, (uint8_t*) input, 1, 1000);
 8000944:	b91c      	cbnz	r4, 800094e <uart_getchar+0x1e>
	return (char)input[0];
}
 8000946:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800094a:	b003      	add	sp, #12
 800094c:	bd30      	pop	{r4, r5, pc}
	if (echo) HAL_UART_Transmit(huart, (uint8_t*) input, 1, 1000);
 800094e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000952:	2201      	movs	r2, #1
 8000954:	a901      	add	r1, sp, #4
 8000956:	4628      	mov	r0, r5
 8000958:	f001 f80c 	bl	8001974 <HAL_UART_Transmit>
 800095c:	e7f3      	b.n	8000946 <uart_getchar+0x16>

0800095e <uart_getline>:

// Collects characters until size limit or an endline is recieved
// Returns number of characters collected
// 'max size' should match the size of the array or be smaller
int uart_getline(UART_HandleTypeDef *huart, char * input, int max_size)
{
 800095e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000960:	4606      	mov	r6, r0
 8000962:	460f      	mov	r7, r1
 8000964:	4615      	mov	r5, r2
  char single;
  int i = 0;
 8000966:	2400      	movs	r4, #0

	while(1)
	{
		if (i > max_size)
 8000968:	42ac      	cmp	r4, r5
 800096a:	dc0a      	bgt.n	8000982 <uart_getline+0x24>
      {
				break;
			}

		single = uart_getchar(huart, 1); // Get one character
 800096c:	2101      	movs	r1, #1
 800096e:	4630      	mov	r0, r6
 8000970:	f7ff ffde 	bl	8000930 <uart_getchar>

  	if (single == '\n' || single == '\r') // Unix & co. use \n, Windows uses \r\n
 8000974:	280d      	cmp	r0, #13
 8000976:	bf18      	it	ne
 8000978:	280a      	cmpne	r0, #10
 800097a:	d002      	beq.n	8000982 <uart_getline+0x24>
			break;
  	else
			input[i] = single;
 800097c:	5538      	strb	r0, [r7, r4]
  	i++;
 800097e:	3401      	adds	r4, #1
		if (i > max_size)
 8000980:	e7f2      	b.n	8000968 <uart_getline+0xa>
	}
  return i; // The way this is set up, it will always report the wrong size
}
 8000982:	4620      	mov	r0, r4
 8000984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000988 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000988:	480d      	ldr	r0, [pc, #52]	; (80009c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800098a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 800098c:	480d      	ldr	r0, [pc, #52]	; (80009c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800098e:	490e      	ldr	r1, [pc, #56]	; (80009c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000990:	4a0e      	ldr	r2, [pc, #56]	; (80009cc <LoopForever+0xe>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000994:	e002      	b.n	800099c <LoopCopyDataInit>

08000996 <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 8000996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099a:	3304      	adds	r3, #4

0800099c <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 800099c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099e:	428c      	cmp	r4, r1



  bcc CopyDataInit
 80009a0:	d3f9      	bcc.n	8000996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a2:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009a4:	4c0b      	ldr	r4, [pc, #44]	; (80009d4 <LoopForever+0x16>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a8:	e001      	b.n	80009ae <LoopFillZerobss>

080009aa <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 80009aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ac:	3204      	adds	r2, #4

080009ae <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 80009ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b0:	d3fb      	bcc.n	80009aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009b2:	f000 f813 	bl	80009dc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009b6:	f001 fb3d 	bl	8002034 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ba:	f7ff fe0d 	bl	80005d8 <main>

080009be <LoopForever>:

LoopForever:
    b LoopForever
 80009be:	e7fe      	b.n	80009be <LoopForever>
  ldr   r0, =_estack
 80009c0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80009c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009cc:	08003354 	.word	0x08003354
  ldr r2, =_sbss
 80009d0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009d4:	200001ac 	.word	0x200001ac

080009d8 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009d8:	e7fe      	b.n	80009d8 <ADC_IRQHandler>
	...

080009dc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <SystemInit+0x18>)
 80009de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80009e2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80009e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009ee:	609a      	str	r2, [r3, #8]
#endif
}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80009f8:	4770      	bx	lr
	...

080009fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009fc:	b510      	push	{r4, lr}
 80009fe:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a00:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <HAL_InitTick+0x40>)
 8000a02:	7818      	ldrb	r0, [r3, #0]
 8000a04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a08:	fbb3 f3f0 	udiv	r3, r3, r0
 8000a0c:	4a0c      	ldr	r2, [pc, #48]	; (8000a40 <HAL_InitTick+0x44>)
 8000a0e:	6810      	ldr	r0, [r2, #0]
 8000a10:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a14:	f000 f896 	bl	8000b44 <HAL_SYSTICK_Config>
 8000a18:	b968      	cbnz	r0, 8000a36 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1a:	2c0f      	cmp	r4, #15
 8000a1c:	d901      	bls.n	8000a22 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000a1e:	2001      	movs	r0, #1
 8000a20:	e00a      	b.n	8000a38 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a22:	2200      	movs	r2, #0
 8000a24:	4621      	mov	r1, r4
 8000a26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a2a:	f000 f859 	bl	8000ae0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a2e:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <HAL_InitTick+0x40>)
 8000a30:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000a32:	2000      	movs	r0, #0
 8000a34:	e000      	b.n	8000a38 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000a36:	2001      	movs	r0, #1
}
 8000a38:	bd10      	pop	{r4, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000004 	.word	0x20000004
 8000a40:	20000000 	.word	0x20000000

08000a44 <HAL_Init>:
{
 8000a44:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_Init+0x28>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a4e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a56:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a58:	2003      	movs	r0, #3
 8000a5a:	f000 f82f 	bl	8000abc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5e:	200f      	movs	r0, #15
 8000a60:	f7ff ffcc 	bl	80009fc <HAL_InitTick>
  HAL_MspInit();
 8000a64:	f7ff ffc8 	bl	80009f8 <HAL_MspInit>
}
 8000a68:	2000      	movs	r0, #0
 8000a6a:	bd08      	pop	{r3, pc}
 8000a6c:	40023c00 	.word	0x40023c00

08000a70 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a70:	4a03      	ldr	r2, [pc, #12]	; (8000a80 <HAL_IncTick+0x10>)
 8000a72:	6811      	ldr	r1, [r2, #0]
 8000a74:	4b03      	ldr	r3, [pc, #12]	; (8000a84 <HAL_IncTick+0x14>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	440b      	add	r3, r1
 8000a7a:	6013      	str	r3, [r2, #0]
}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20000198 	.word	0x20000198
 8000a84:	20000004 	.word	0x20000004

08000a88 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a88:	4b01      	ldr	r3, [pc, #4]	; (8000a90 <HAL_GetTick+0x8>)
 8000a8a:	6818      	ldr	r0, [r3, #0]
}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	20000198 	.word	0x20000198

08000a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a94:	b538      	push	{r3, r4, r5, lr}
 8000a96:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a98:	f7ff fff6 	bl	8000a88 <HAL_GetTick>
 8000a9c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a9e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8000aa2:	d002      	beq.n	8000aaa <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <HAL_Delay+0x24>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aaa:	f7ff ffed 	bl	8000a88 <HAL_GetTick>
 8000aae:	1b40      	subs	r0, r0, r5
 8000ab0:	42a0      	cmp	r0, r4
 8000ab2:	d3fa      	bcc.n	8000aaa <HAL_Delay+0x16>
  {
  }
}
 8000ab4:	bd38      	pop	{r3, r4, r5, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000004 	.word	0x20000004

08000abc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000abc:	4906      	ldr	r1, [pc, #24]	; (8000ad8 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000abe:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ac4:	041b      	lsls	r3, r3, #16
 8000ac6:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac8:	0200      	lsls	r0, r0, #8
 8000aca:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ace:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000ad0:	4a02      	ldr	r2, [pc, #8]	; (8000adc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000ad2:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000ad4:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00
 8000adc:	05fa0000 	.word	0x05fa0000

08000ae0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ae0:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <HAL_NVIC_SetPriority+0x58>)
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aea:	f1c3 0407 	rsb	r4, r3, #7
 8000aee:	2c04      	cmp	r4, #4
 8000af0:	bf28      	it	cs
 8000af2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af4:	1d1d      	adds	r5, r3, #4
 8000af6:	2d06      	cmp	r5, #6
 8000af8:	d914      	bls.n	8000b24 <HAL_NVIC_SetPriority+0x44>
 8000afa:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000b00:	fa05 f404 	lsl.w	r4, r5, r4
 8000b04:	ea21 0104 	bic.w	r1, r1, r4
 8000b08:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b0a:	fa05 f303 	lsl.w	r3, r5, r3
 8000b0e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b12:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000b14:	2800      	cmp	r0, #0
 8000b16:	db07      	blt.n	8000b28 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b18:	0109      	lsls	r1, r1, #4
 8000b1a:	b2c9      	uxtb	r1, r1
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <HAL_NVIC_SetPriority+0x5c>)
 8000b1e:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000b20:	bc30      	pop	{r4, r5}
 8000b22:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b24:	2300      	movs	r3, #0
 8000b26:	e7e9      	b.n	8000afc <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b28:	f000 000f 	and.w	r0, r0, #15
 8000b2c:	0109      	lsls	r1, r1, #4
 8000b2e:	b2c9      	uxtb	r1, r1
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <HAL_NVIC_SetPriority+0x60>)
 8000b32:	5419      	strb	r1, [r3, r0]
 8000b34:	e7f4      	b.n	8000b20 <HAL_NVIC_SetPriority+0x40>
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00
 8000b3c:	e000e400 	.word	0xe000e400
 8000b40:	e000ed14 	.word	0xe000ed14

08000b44 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b44:	3801      	subs	r0, #1
 8000b46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b4a:	d20a      	bcs.n	8000b62 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_SYSTICK_Config+0x24>)
 8000b4e:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b50:	4a06      	ldr	r2, [pc, #24]	; (8000b6c <HAL_SYSTICK_Config+0x28>)
 8000b52:	21f0      	movs	r1, #240	; 0xf0
 8000b54:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b58:	2000      	movs	r0, #0
 8000b5a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5c:	2207      	movs	r2, #7
 8000b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b60:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b62:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000e010 	.word	0xe000e010
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b70:	2300      	movs	r3, #0
 8000b72:	2b0f      	cmp	r3, #15
 8000b74:	f200 80e3 	bhi.w	8000d3e <HAL_GPIO_Init+0x1ce>
{
 8000b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	e039      	b.n	8000bf2 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000b7e:	2209      	movs	r2, #9
 8000b80:	e000      	b.n	8000b84 <HAL_GPIO_Init+0x14>
 8000b82:	2200      	movs	r2, #0
 8000b84:	40b2      	lsls	r2, r6
 8000b86:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000b88:	3402      	adds	r4, #2
 8000b8a:	4e6d      	ldr	r6, [pc, #436]	; (8000d40 <HAL_GPIO_Init+0x1d0>)
 8000b8c:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b90:	4a6c      	ldr	r2, [pc, #432]	; (8000d44 <HAL_GPIO_Init+0x1d4>)
 8000b92:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000b94:	43ea      	mvns	r2, r5
 8000b96:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b9a:	684f      	ldr	r7, [r1, #4]
 8000b9c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000ba0:	d001      	beq.n	8000ba6 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8000ba2:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8000ba6:	4c67      	ldr	r4, [pc, #412]	; (8000d44 <HAL_GPIO_Init+0x1d4>)
 8000ba8:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8000baa:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000bac:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bb0:	684f      	ldr	r7, [r1, #4]
 8000bb2:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000bb6:	d001      	beq.n	8000bbc <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8000bb8:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8000bbc:	4c61      	ldr	r4, [pc, #388]	; (8000d44 <HAL_GPIO_Init+0x1d4>)
 8000bbe:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bc0:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000bc2:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bc6:	684f      	ldr	r7, [r1, #4]
 8000bc8:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000bcc:	d001      	beq.n	8000bd2 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8000bce:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8000bd2:	4c5c      	ldr	r4, [pc, #368]	; (8000d44 <HAL_GPIO_Init+0x1d4>)
 8000bd4:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000bd6:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000bd8:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bda:	684e      	ldr	r6, [r1, #4]
 8000bdc:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000be0:	d001      	beq.n	8000be6 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8000be2:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8000be6:	4c57      	ldr	r4, [pc, #348]	; (8000d44 <HAL_GPIO_Init+0x1d4>)
 8000be8:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000bea:	3301      	adds	r3, #1
 8000bec:	2b0f      	cmp	r3, #15
 8000bee:	f200 80a4 	bhi.w	8000d3a <HAL_GPIO_Init+0x1ca>
    ioposition = ((uint32_t)0x01) << position;
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bf6:	680c      	ldr	r4, [r1, #0]
 8000bf8:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8000bfc:	ea32 0404 	bics.w	r4, r2, r4
 8000c00:	d1f3      	bne.n	8000bea <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c02:	684c      	ldr	r4, [r1, #4]
 8000c04:	1e66      	subs	r6, r4, #1
 8000c06:	2c11      	cmp	r4, #17
 8000c08:	bf18      	it	ne
 8000c0a:	2e01      	cmpne	r6, #1
 8000c0c:	d901      	bls.n	8000c12 <HAL_GPIO_Init+0xa2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c0e:	2c12      	cmp	r4, #18
 8000c10:	d112      	bne.n	8000c38 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->OSPEEDR; 
 8000c12:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c14:	005f      	lsls	r7, r3, #1
 8000c16:	2403      	movs	r4, #3
 8000c18:	40bc      	lsls	r4, r7
 8000c1a:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8000c1e:	68cc      	ldr	r4, [r1, #12]
 8000c20:	40bc      	lsls	r4, r7
 8000c22:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000c24:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c26:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c28:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000c2c:	684c      	ldr	r4, [r1, #4]
 8000c2e:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8000c32:	409a      	lsls	r2, r3
 8000c34:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8000c36:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8000c38:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c3a:	005e      	lsls	r6, r3, #1
 8000c3c:	2403      	movs	r4, #3
 8000c3e:	40b4      	lsls	r4, r6
 8000c40:	43e2      	mvns	r2, r4
 8000c42:	ea27 0704 	bic.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000c46:	688c      	ldr	r4, [r1, #8]
 8000c48:	40b4      	lsls	r4, r6
 8000c4a:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 8000c4c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c4e:	684c      	ldr	r4, [r1, #4]
 8000c50:	2c12      	cmp	r4, #18
 8000c52:	bf18      	it	ne
 8000c54:	2c02      	cmpne	r4, #2
 8000c56:	d113      	bne.n	8000c80 <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3];
 8000c58:	08df      	lsrs	r7, r3, #3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c60:	f003 0407 	and.w	r4, r3, #7
 8000c64:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8000c68:	240f      	movs	r4, #15
 8000c6a:	fa04 f40c 	lsl.w	r4, r4, ip
 8000c6e:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c72:	690c      	ldr	r4, [r1, #16]
 8000c74:	fa04 f40c 	lsl.w	r4, r4, ip
 8000c78:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
 8000c7c:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 8000c80:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c82:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c84:	684a      	ldr	r2, [r1, #4]
 8000c86:	f002 0203 	and.w	r2, r2, #3
 8000c8a:	40b2      	lsls	r2, r6
 8000c8c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000c8e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c90:	684a      	ldr	r2, [r1, #4]
 8000c92:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000c96:	d0a8      	beq.n	8000bea <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c98:	4a2b      	ldr	r2, [pc, #172]	; (8000d48 <HAL_GPIO_Init+0x1d8>)
 8000c9a:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000c9c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000ca0:	6454      	str	r4, [r2, #68]	; 0x44
 8000ca2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000ca4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000ca8:	9201      	str	r2, [sp, #4]
 8000caa:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000cac:	089c      	lsrs	r4, r3, #2
 8000cae:	1ca6      	adds	r6, r4, #2
 8000cb0:	4a23      	ldr	r2, [pc, #140]	; (8000d40 <HAL_GPIO_Init+0x1d0>)
 8000cb2:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cb6:	f003 0203 	and.w	r2, r3, #3
 8000cba:	0096      	lsls	r6, r2, #2
 8000cbc:	220f      	movs	r2, #15
 8000cbe:	40b2      	lsls	r2, r6
 8000cc0:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000cc4:	4a21      	ldr	r2, [pc, #132]	; (8000d4c <HAL_GPIO_Init+0x1dc>)
 8000cc6:	4290      	cmp	r0, r2
 8000cc8:	f43f af5b 	beq.w	8000b82 <HAL_GPIO_Init+0x12>
 8000ccc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d022      	beq.n	8000d1a <HAL_GPIO_Init+0x1aa>
 8000cd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cd8:	4290      	cmp	r0, r2
 8000cda:	d020      	beq.n	8000d1e <HAL_GPIO_Init+0x1ae>
 8000cdc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	d01e      	beq.n	8000d22 <HAL_GPIO_Init+0x1b2>
 8000ce4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ce8:	4290      	cmp	r0, r2
 8000cea:	d01c      	beq.n	8000d26 <HAL_GPIO_Init+0x1b6>
 8000cec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d01a      	beq.n	8000d2a <HAL_GPIO_Init+0x1ba>
 8000cf4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cf8:	4290      	cmp	r0, r2
 8000cfa:	d018      	beq.n	8000d2e <HAL_GPIO_Init+0x1be>
 8000cfc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d016      	beq.n	8000d32 <HAL_GPIO_Init+0x1c2>
 8000d04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d08:	4290      	cmp	r0, r2
 8000d0a:	d014      	beq.n	8000d36 <HAL_GPIO_Init+0x1c6>
 8000d0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f43f af34 	beq.w	8000b7e <HAL_GPIO_Init+0xe>
 8000d16:	220a      	movs	r2, #10
 8000d18:	e734      	b.n	8000b84 <HAL_GPIO_Init+0x14>
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	e732      	b.n	8000b84 <HAL_GPIO_Init+0x14>
 8000d1e:	2202      	movs	r2, #2
 8000d20:	e730      	b.n	8000b84 <HAL_GPIO_Init+0x14>
 8000d22:	2203      	movs	r2, #3
 8000d24:	e72e      	b.n	8000b84 <HAL_GPIO_Init+0x14>
 8000d26:	2204      	movs	r2, #4
 8000d28:	e72c      	b.n	8000b84 <HAL_GPIO_Init+0x14>
 8000d2a:	2205      	movs	r2, #5
 8000d2c:	e72a      	b.n	8000b84 <HAL_GPIO_Init+0x14>
 8000d2e:	2206      	movs	r2, #6
 8000d30:	e728      	b.n	8000b84 <HAL_GPIO_Init+0x14>
 8000d32:	2207      	movs	r2, #7
 8000d34:	e726      	b.n	8000b84 <HAL_GPIO_Init+0x14>
 8000d36:	2208      	movs	r2, #8
 8000d38:	e724      	b.n	8000b84 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000d3a:	b003      	add	sp, #12
 8000d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d3e:	4770      	bx	lr
 8000d40:	40013800 	.word	0x40013800
 8000d44:	40013c00 	.word	0x40013c00
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020000 	.word	0x40020000

08000d50 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000d50:	b510      	push	{r4, lr}
 8000d52:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d54:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <HAL_PWREx_EnableOverDrive+0x74>)
 8000d56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d58:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d5c:	641a      	str	r2, [r3, #64]	; 0x40
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d64:	9301      	str	r3, [sp, #4]
 8000d66:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000d68:	4a17      	ldr	r2, [pc, #92]	; (8000dc8 <HAL_PWREx_EnableOverDrive+0x78>)
 8000d6a:	6813      	ldr	r3, [r2, #0]
 8000d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d70:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d72:	f7ff fe89 	bl	8000a88 <HAL_GetTick>
 8000d76:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <HAL_PWREx_EnableOverDrive+0x78>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000d80:	d108      	bne.n	8000d94 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000d82:	f7ff fe81 	bl	8000a88 <HAL_GetTick>
 8000d86:	1b00      	subs	r0, r0, r4
 8000d88:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000d8c:	d9f4      	bls.n	8000d78 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8000d8e:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8000d90:	b002      	add	sp, #8
 8000d92:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000d94:	4a0c      	ldr	r2, [pc, #48]	; (8000dc8 <HAL_PWREx_EnableOverDrive+0x78>)
 8000d96:	6813      	ldr	r3, [r2, #0]
 8000d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d9c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8000d9e:	f7ff fe73 	bl	8000a88 <HAL_GetTick>
 8000da2:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <HAL_PWREx_EnableOverDrive+0x78>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000dac:	d107      	bne.n	8000dbe <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000dae:	f7ff fe6b 	bl	8000a88 <HAL_GetTick>
 8000db2:	1b00      	subs	r0, r0, r4
 8000db4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000db8:	d9f4      	bls.n	8000da4 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8000dba:	2003      	movs	r0, #3
 8000dbc:	e7e8      	b.n	8000d90 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	e7e6      	b.n	8000d90 <HAL_PWREx_EnableOverDrive+0x40>
 8000dc2:	bf00      	nop
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40007000 	.word	0x40007000

08000dcc <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dcc:	2800      	cmp	r0, #0
 8000dce:	f000 8206 	beq.w	80011de <HAL_RCC_OscConfig+0x412>
{
 8000dd2:	b570      	push	{r4, r5, r6, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dd8:	6803      	ldr	r3, [r0, #0]
 8000dda:	f013 0f01 	tst.w	r3, #1
 8000dde:	d029      	beq.n	8000e34 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000de0:	4ba7      	ldr	r3, [pc, #668]	; (8001080 <HAL_RCC_OscConfig+0x2b4>)
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	f003 030c 	and.w	r3, r3, #12
 8000de8:	2b04      	cmp	r3, #4
 8000dea:	d01a      	beq.n	8000e22 <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000dec:	4ba4      	ldr	r3, [pc, #656]	; (8001080 <HAL_RCC_OscConfig+0x2b4>)
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	f003 030c 	and.w	r3, r3, #12
 8000df4:	2b08      	cmp	r3, #8
 8000df6:	d00f      	beq.n	8000e18 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000df8:	6863      	ldr	r3, [r4, #4]
 8000dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dfe:	d040      	beq.n	8000e82 <HAL_RCC_OscConfig+0xb6>
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d154      	bne.n	8000eae <HAL_RCC_OscConfig+0xe2>
 8000e04:	4b9e      	ldr	r3, [pc, #632]	; (8001080 <HAL_RCC_OscConfig+0x2b4>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	e039      	b.n	8000e8c <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e18:	4b99      	ldr	r3, [pc, #612]	; (8001080 <HAL_RCC_OscConfig+0x2b4>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000e20:	d0ea      	beq.n	8000df8 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e22:	4b97      	ldr	r3, [pc, #604]	; (8001080 <HAL_RCC_OscConfig+0x2b4>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e2a:	d003      	beq.n	8000e34 <HAL_RCC_OscConfig+0x68>
 8000e2c:	6863      	ldr	r3, [r4, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f000 81d7 	beq.w	80011e2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e34:	6823      	ldr	r3, [r4, #0]
 8000e36:	f013 0f02 	tst.w	r3, #2
 8000e3a:	d074      	beq.n	8000f26 <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e3c:	4b90      	ldr	r3, [pc, #576]	; (8001080 <HAL_RCC_OscConfig+0x2b4>)
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	f013 0f0c 	tst.w	r3, #12
 8000e44:	d05e      	beq.n	8000f04 <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e46:	4b8e      	ldr	r3, [pc, #568]	; (8001080 <HAL_RCC_OscConfig+0x2b4>)
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	f003 030c 	and.w	r3, r3, #12
 8000e4e:	2b08      	cmp	r3, #8
 8000e50:	d053      	beq.n	8000efa <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000e52:	68e3      	ldr	r3, [r4, #12]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	f000 8089 	beq.w	8000f6c <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e5a:	4a89      	ldr	r2, [pc, #548]	; (8001080 <HAL_RCC_OscConfig+0x2b4>)
 8000e5c:	6813      	ldr	r3, [r2, #0]
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e64:	f7ff fe10 	bl	8000a88 <HAL_GetTick>
 8000e68:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e6a:	4b85      	ldr	r3, [pc, #532]	; (8001080 <HAL_RCC_OscConfig+0x2b4>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f013 0f02 	tst.w	r3, #2
 8000e72:	d172      	bne.n	8000f5a <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e74:	f7ff fe08 	bl	8000a88 <HAL_GetTick>
 8000e78:	1b40      	subs	r0, r0, r5
 8000e7a:	2802      	cmp	r0, #2
 8000e7c:	d9f5      	bls.n	8000e6a <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8000e7e:	2003      	movs	r0, #3
 8000e80:	e1b4      	b.n	80011ec <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e82:	4a7f      	ldr	r2, [pc, #508]	; (8001080 <HAL_RCC_OscConfig+0x2b4>)
 8000e84:	6813      	ldr	r3, [r2, #0]
 8000e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e8a:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e8c:	6863      	ldr	r3, [r4, #4]
 8000e8e:	b32b      	cbz	r3, 8000edc <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8000e90:	f7ff fdfa 	bl	8000a88 <HAL_GetTick>
 8000e94:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e96:	4b7a      	ldr	r3, [pc, #488]	; (8001080 <HAL_RCC_OscConfig+0x2b4>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e9e:	d1c9      	bne.n	8000e34 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ea0:	f7ff fdf2 	bl	8000a88 <HAL_GetTick>
 8000ea4:	1b40      	subs	r0, r0, r5
 8000ea6:	2864      	cmp	r0, #100	; 0x64
 8000ea8:	d9f5      	bls.n	8000e96 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8000eaa:	2003      	movs	r0, #3
 8000eac:	e19e      	b.n	80011ec <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000eb2:	d009      	beq.n	8000ec8 <HAL_RCC_OscConfig+0xfc>
 8000eb4:	4b72      	ldr	r3, [pc, #456]	; (8001080 <HAL_RCC_OscConfig+0x2b4>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	e7e1      	b.n	8000e8c <HAL_RCC_OscConfig+0xc0>
 8000ec8:	4b6d      	ldr	r3, [pc, #436]	; (8001080 <HAL_RCC_OscConfig+0x2b4>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	e7d7      	b.n	8000e8c <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8000edc:	f7ff fdd4 	bl	8000a88 <HAL_GetTick>
 8000ee0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ee2:	4b67      	ldr	r3, [pc, #412]	; (8001080 <HAL_RCC_OscConfig+0x2b4>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000eea:	d0a3      	beq.n	8000e34 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000eec:	f7ff fdcc 	bl	8000a88 <HAL_GetTick>
 8000ef0:	1b40      	subs	r0, r0, r5
 8000ef2:	2864      	cmp	r0, #100	; 0x64
 8000ef4:	d9f5      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8000ef6:	2003      	movs	r0, #3
 8000ef8:	e178      	b.n	80011ec <HAL_RCC_OscConfig+0x420>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000efa:	4b61      	ldr	r3, [pc, #388]	; (8001080 <HAL_RCC_OscConfig+0x2b4>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000f02:	d1a6      	bne.n	8000e52 <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f04:	4b5e      	ldr	r3, [pc, #376]	; (8001080 <HAL_RCC_OscConfig+0x2b4>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f013 0f02 	tst.w	r3, #2
 8000f0c:	d003      	beq.n	8000f16 <HAL_RCC_OscConfig+0x14a>
 8000f0e:	68e3      	ldr	r3, [r4, #12]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	f040 8168 	bne.w	80011e6 <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f16:	4a5a      	ldr	r2, [pc, #360]	; (8001080 <HAL_RCC_OscConfig+0x2b4>)
 8000f18:	6813      	ldr	r3, [r2, #0]
 8000f1a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f1e:	6921      	ldr	r1, [r4, #16]
 8000f20:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f24:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f26:	6823      	ldr	r3, [r4, #0]
 8000f28:	f013 0f08 	tst.w	r3, #8
 8000f2c:	d046      	beq.n	8000fbc <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000f2e:	6963      	ldr	r3, [r4, #20]
 8000f30:	b383      	cbz	r3, 8000f94 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f32:	4a53      	ldr	r2, [pc, #332]	; (8001080 <HAL_RCC_OscConfig+0x2b4>)
 8000f34:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f3c:	f7ff fda4 	bl	8000a88 <HAL_GetTick>
 8000f40:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f42:	4b4f      	ldr	r3, [pc, #316]	; (8001080 <HAL_RCC_OscConfig+0x2b4>)
 8000f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f46:	f013 0f02 	tst.w	r3, #2
 8000f4a:	d137      	bne.n	8000fbc <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f4c:	f7ff fd9c 	bl	8000a88 <HAL_GetTick>
 8000f50:	1b40      	subs	r0, r0, r5
 8000f52:	2802      	cmp	r0, #2
 8000f54:	d9f5      	bls.n	8000f42 <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 8000f56:	2003      	movs	r0, #3
 8000f58:	e148      	b.n	80011ec <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f5a:	4a49      	ldr	r2, [pc, #292]	; (8001080 <HAL_RCC_OscConfig+0x2b4>)
 8000f5c:	6813      	ldr	r3, [r2, #0]
 8000f5e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f62:	6921      	ldr	r1, [r4, #16]
 8000f64:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	e7dc      	b.n	8000f26 <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8000f6c:	4a44      	ldr	r2, [pc, #272]	; (8001080 <HAL_RCC_OscConfig+0x2b4>)
 8000f6e:	6813      	ldr	r3, [r2, #0]
 8000f70:	f023 0301 	bic.w	r3, r3, #1
 8000f74:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000f76:	f7ff fd87 	bl	8000a88 <HAL_GetTick>
 8000f7a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f7c:	4b40      	ldr	r3, [pc, #256]	; (8001080 <HAL_RCC_OscConfig+0x2b4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f013 0f02 	tst.w	r3, #2
 8000f84:	d0cf      	beq.n	8000f26 <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f86:	f7ff fd7f 	bl	8000a88 <HAL_GetTick>
 8000f8a:	1b40      	subs	r0, r0, r5
 8000f8c:	2802      	cmp	r0, #2
 8000f8e:	d9f5      	bls.n	8000f7c <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 8000f90:	2003      	movs	r0, #3
 8000f92:	e12b      	b.n	80011ec <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f94:	4a3a      	ldr	r2, [pc, #232]	; (8001080 <HAL_RCC_OscConfig+0x2b4>)
 8000f96:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000f98:	f023 0301 	bic.w	r3, r3, #1
 8000f9c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f9e:	f7ff fd73 	bl	8000a88 <HAL_GetTick>
 8000fa2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fa4:	4b36      	ldr	r3, [pc, #216]	; (8001080 <HAL_RCC_OscConfig+0x2b4>)
 8000fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fa8:	f013 0f02 	tst.w	r3, #2
 8000fac:	d006      	beq.n	8000fbc <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fae:	f7ff fd6b 	bl	8000a88 <HAL_GetTick>
 8000fb2:	1b40      	subs	r0, r0, r5
 8000fb4:	2802      	cmp	r0, #2
 8000fb6:	d9f5      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8000fb8:	2003      	movs	r0, #3
 8000fba:	e117      	b.n	80011ec <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fbc:	6823      	ldr	r3, [r4, #0]
 8000fbe:	f013 0f04 	tst.w	r3, #4
 8000fc2:	d07d      	beq.n	80010c0 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fc4:	4b2e      	ldr	r3, [pc, #184]	; (8001080 <HAL_RCC_OscConfig+0x2b4>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000fcc:	d10b      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fce:	4b2c      	ldr	r3, [pc, #176]	; (8001080 <HAL_RCC_OscConfig+0x2b4>)
 8000fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fd2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fd6:	641a      	str	r2, [r3, #64]	; 0x40
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000fe2:	2501      	movs	r5, #1
 8000fe4:	e000      	b.n	8000fe8 <HAL_RCC_OscConfig+0x21c>
  FlagStatus pwrclkchanged = RESET;
 8000fe6:	2500      	movs	r5, #0
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fe8:	4b26      	ldr	r3, [pc, #152]	; (8001084 <HAL_RCC_OscConfig+0x2b8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000ff0:	d00e      	beq.n	8001010 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ff2:	68a3      	ldr	r3, [r4, #8]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d01f      	beq.n	8001038 <HAL_RCC_OscConfig+0x26c>
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d135      	bne.n	8001068 <HAL_RCC_OscConfig+0x29c>
 8000ffc:	4b20      	ldr	r3, [pc, #128]	; (8001080 <HAL_RCC_OscConfig+0x2b4>)
 8000ffe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001000:	f022 0201 	bic.w	r2, r2, #1
 8001004:	671a      	str	r2, [r3, #112]	; 0x70
 8001006:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001008:	f022 0204 	bic.w	r2, r2, #4
 800100c:	671a      	str	r2, [r3, #112]	; 0x70
 800100e:	e018      	b.n	8001042 <HAL_RCC_OscConfig+0x276>
      PWR->CR1 |= PWR_CR1_DBP;
 8001010:	4a1c      	ldr	r2, [pc, #112]	; (8001084 <HAL_RCC_OscConfig+0x2b8>)
 8001012:	6813      	ldr	r3, [r2, #0]
 8001014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001018:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800101a:	f7ff fd35 	bl	8000a88 <HAL_GetTick>
 800101e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001020:	4b18      	ldr	r3, [pc, #96]	; (8001084 <HAL_RCC_OscConfig+0x2b8>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001028:	d1e3      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x226>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800102a:	f7ff fd2d 	bl	8000a88 <HAL_GetTick>
 800102e:	1b80      	subs	r0, r0, r6
 8001030:	2864      	cmp	r0, #100	; 0x64
 8001032:	d9f5      	bls.n	8001020 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 8001034:	2003      	movs	r0, #3
 8001036:	e0d9      	b.n	80011ec <HAL_RCC_OscConfig+0x420>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001038:	4a11      	ldr	r2, [pc, #68]	; (8001080 <HAL_RCC_OscConfig+0x2b4>)
 800103a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001042:	68a3      	ldr	r3, [r4, #8]
 8001044:	b353      	cbz	r3, 800109c <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001046:	f7ff fd1f 	bl	8000a88 <HAL_GetTick>
 800104a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <HAL_RCC_OscConfig+0x2b4>)
 800104e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001050:	f013 0f02 	tst.w	r3, #2
 8001054:	d133      	bne.n	80010be <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001056:	f7ff fd17 	bl	8000a88 <HAL_GetTick>
 800105a:	1b80      	subs	r0, r0, r6
 800105c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001060:	4298      	cmp	r0, r3
 8001062:	d9f3      	bls.n	800104c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001064:	2003      	movs	r0, #3
 8001066:	e0c1      	b.n	80011ec <HAL_RCC_OscConfig+0x420>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001068:	2b05      	cmp	r3, #5
 800106a:	d00d      	beq.n	8001088 <HAL_RCC_OscConfig+0x2bc>
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <HAL_RCC_OscConfig+0x2b4>)
 800106e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001070:	f022 0201 	bic.w	r2, r2, #1
 8001074:	671a      	str	r2, [r3, #112]	; 0x70
 8001076:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001078:	f022 0204 	bic.w	r2, r2, #4
 800107c:	671a      	str	r2, [r3, #112]	; 0x70
 800107e:	e7e0      	b.n	8001042 <HAL_RCC_OscConfig+0x276>
 8001080:	40023800 	.word	0x40023800
 8001084:	40007000 	.word	0x40007000
 8001088:	4b60      	ldr	r3, [pc, #384]	; (800120c <HAL_RCC_OscConfig+0x440>)
 800108a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800108c:	f042 0204 	orr.w	r2, r2, #4
 8001090:	671a      	str	r2, [r3, #112]	; 0x70
 8001092:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001094:	f042 0201 	orr.w	r2, r2, #1
 8001098:	671a      	str	r2, [r3, #112]	; 0x70
 800109a:	e7d2      	b.n	8001042 <HAL_RCC_OscConfig+0x276>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800109c:	f7ff fcf4 	bl	8000a88 <HAL_GetTick>
 80010a0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a2:	4b5a      	ldr	r3, [pc, #360]	; (800120c <HAL_RCC_OscConfig+0x440>)
 80010a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010a6:	f013 0f02 	tst.w	r3, #2
 80010aa:	d008      	beq.n	80010be <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ac:	f7ff fcec 	bl	8000a88 <HAL_GetTick>
 80010b0:	1b80      	subs	r0, r0, r6
 80010b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80010b6:	4298      	cmp	r0, r3
 80010b8:	d9f3      	bls.n	80010a2 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 80010ba:	2003      	movs	r0, #3
 80010bc:	e096      	b.n	80011ec <HAL_RCC_OscConfig+0x420>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80010be:	b9fd      	cbnz	r5, 8001100 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010c0:	69a3      	ldr	r3, [r4, #24]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f000 8091 	beq.w	80011ea <HAL_RCC_OscConfig+0x41e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010c8:	4a50      	ldr	r2, [pc, #320]	; (800120c <HAL_RCC_OscConfig+0x440>)
 80010ca:	6892      	ldr	r2, [r2, #8]
 80010cc:	f002 020c 	and.w	r2, r2, #12
 80010d0:	2a08      	cmp	r2, #8
 80010d2:	d059      	beq.n	8001188 <HAL_RCC_OscConfig+0x3bc>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d019      	beq.n	800110c <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010d8:	4a4c      	ldr	r2, [pc, #304]	; (800120c <HAL_RCC_OscConfig+0x440>)
 80010da:	6813      	ldr	r3, [r2, #0]
 80010dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e2:	f7ff fcd1 	bl	8000a88 <HAL_GetTick>
 80010e6:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010e8:	4b48      	ldr	r3, [pc, #288]	; (800120c <HAL_RCC_OscConfig+0x440>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80010f0:	d048      	beq.n	8001184 <HAL_RCC_OscConfig+0x3b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010f2:	f7ff fcc9 	bl	8000a88 <HAL_GetTick>
 80010f6:	1b00      	subs	r0, r0, r4
 80010f8:	2802      	cmp	r0, #2
 80010fa:	d9f5      	bls.n	80010e8 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80010fc:	2003      	movs	r0, #3
 80010fe:	e075      	b.n	80011ec <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001100:	4a42      	ldr	r2, [pc, #264]	; (800120c <HAL_RCC_OscConfig+0x440>)
 8001102:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001108:	6413      	str	r3, [r2, #64]	; 0x40
 800110a:	e7d9      	b.n	80010c0 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 800110c:	4a3f      	ldr	r2, [pc, #252]	; (800120c <HAL_RCC_OscConfig+0x440>)
 800110e:	6813      	ldr	r3, [r2, #0]
 8001110:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001114:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001116:	f7ff fcb7 	bl	8000a88 <HAL_GetTick>
 800111a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800111c:	4b3b      	ldr	r3, [pc, #236]	; (800120c <HAL_RCC_OscConfig+0x440>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001124:	d006      	beq.n	8001134 <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001126:	f7ff fcaf 	bl	8000a88 <HAL_GetTick>
 800112a:	1b40      	subs	r0, r0, r5
 800112c:	2802      	cmp	r0, #2
 800112e:	d9f5      	bls.n	800111c <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 8001130:	2003      	movs	r0, #3
 8001132:	e05b      	b.n	80011ec <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001134:	69e3      	ldr	r3, [r4, #28]
 8001136:	6a22      	ldr	r2, [r4, #32]
 8001138:	4313      	orrs	r3, r2
 800113a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800113c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001140:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001142:	0852      	lsrs	r2, r2, #1
 8001144:	3a01      	subs	r2, #1
 8001146:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800114a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800114c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001150:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001152:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001156:	4a2d      	ldr	r2, [pc, #180]	; (800120c <HAL_RCC_OscConfig+0x440>)
 8001158:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800115a:	6813      	ldr	r3, [r2, #0]
 800115c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001160:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001162:	f7ff fc91 	bl	8000a88 <HAL_GetTick>
 8001166:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001168:	4b28      	ldr	r3, [pc, #160]	; (800120c <HAL_RCC_OscConfig+0x440>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001170:	d106      	bne.n	8001180 <HAL_RCC_OscConfig+0x3b4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001172:	f7ff fc89 	bl	8000a88 <HAL_GetTick>
 8001176:	1b00      	subs	r0, r0, r4
 8001178:	2802      	cmp	r0, #2
 800117a:	d9f5      	bls.n	8001168 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 800117c:	2003      	movs	r0, #3
 800117e:	e035      	b.n	80011ec <HAL_RCC_OscConfig+0x420>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001180:	2000      	movs	r0, #0
 8001182:	e033      	b.n	80011ec <HAL_RCC_OscConfig+0x420>
 8001184:	2000      	movs	r0, #0
 8001186:	e031      	b.n	80011ec <HAL_RCC_OscConfig+0x420>
      pll_config = RCC->PLLCFGR;
 8001188:	4a20      	ldr	r2, [pc, #128]	; (800120c <HAL_RCC_OscConfig+0x440>)
 800118a:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800118c:	2b01      	cmp	r3, #1
 800118e:	d02f      	beq.n	80011f0 <HAL_RCC_OscConfig+0x424>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001190:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8001194:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001196:	428b      	cmp	r3, r1
 8001198:	d12c      	bne.n	80011f4 <HAL_RCC_OscConfig+0x428>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800119a:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 800119e:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011a0:	428b      	cmp	r3, r1
 80011a2:	d129      	bne.n	80011f8 <HAL_RCC_OscConfig+0x42c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80011a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80011a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80011aa:	4013      	ands	r3, r2
 80011ac:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 80011b0:	d124      	bne.n	80011fc <HAL_RCC_OscConfig+0x430>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80011b2:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 80011b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80011b8:	085b      	lsrs	r3, r3, #1
 80011ba:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80011bc:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 80011c0:	d11e      	bne.n	8001200 <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80011c2:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 80011c6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80011c8:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 80011cc:	d11a      	bne.n	8001204 <HAL_RCC_OscConfig+0x438>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80011ce:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80011d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80011d4:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 80011d8:	d116      	bne.n	8001208 <HAL_RCC_OscConfig+0x43c>
  return HAL_OK;
 80011da:	2000      	movs	r0, #0
 80011dc:	e006      	b.n	80011ec <HAL_RCC_OscConfig+0x420>
    return HAL_ERROR;
 80011de:	2001      	movs	r0, #1
}
 80011e0:	4770      	bx	lr
        return HAL_ERROR;
 80011e2:	2001      	movs	r0, #1
 80011e4:	e002      	b.n	80011ec <HAL_RCC_OscConfig+0x420>
        return HAL_ERROR;
 80011e6:	2001      	movs	r0, #1
 80011e8:	e000      	b.n	80011ec <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 80011ea:	2000      	movs	r0, #0
}
 80011ec:	b002      	add	sp, #8
 80011ee:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80011f0:	2001      	movs	r0, #1
 80011f2:	e7fb      	b.n	80011ec <HAL_RCC_OscConfig+0x420>
 80011f4:	2001      	movs	r0, #1
 80011f6:	e7f9      	b.n	80011ec <HAL_RCC_OscConfig+0x420>
 80011f8:	2001      	movs	r0, #1
 80011fa:	e7f7      	b.n	80011ec <HAL_RCC_OscConfig+0x420>
 80011fc:	2001      	movs	r0, #1
 80011fe:	e7f5      	b.n	80011ec <HAL_RCC_OscConfig+0x420>
 8001200:	2001      	movs	r0, #1
 8001202:	e7f3      	b.n	80011ec <HAL_RCC_OscConfig+0x420>
 8001204:	2001      	movs	r0, #1
 8001206:	e7f1      	b.n	80011ec <HAL_RCC_OscConfig+0x420>
 8001208:	2001      	movs	r0, #1
 800120a:	e7ef      	b.n	80011ec <HAL_RCC_OscConfig+0x420>
 800120c:	40023800 	.word	0x40023800

08001210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001212:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	2b04      	cmp	r3, #4
 800121c:	d03d      	beq.n	800129a <HAL_RCC_GetSysClockFreq+0x8a>
 800121e:	2b08      	cmp	r3, #8
 8001220:	d13d      	bne.n	800129e <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001222:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001230:	d012      	beq.n	8001258 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001234:	6859      	ldr	r1, [r3, #4]
 8001236:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800123a:	2300      	movs	r3, #0
 800123c:	481a      	ldr	r0, [pc, #104]	; (80012a8 <HAL_RCC_GetSysClockFreq+0x98>)
 800123e:	fba1 0100 	umull	r0, r1, r1, r0
 8001242:	f7ff f84d 	bl	80002e0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001246:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800124e:	3301      	adds	r3, #1
 8001250:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001252:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001256:	e023      	b.n	80012a0 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001260:	015c      	lsls	r4, r3, #5
 8001262:	2500      	movs	r5, #0
 8001264:	1ae4      	subs	r4, r4, r3
 8001266:	f165 0500 	sbc.w	r5, r5, #0
 800126a:	01ae      	lsls	r6, r5, #6
 800126c:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8001270:	01a7      	lsls	r7, r4, #6
 8001272:	1b38      	subs	r0, r7, r4
 8001274:	eb66 0105 	sbc.w	r1, r6, r5
 8001278:	00cc      	lsls	r4, r1, #3
 800127a:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 800127e:	00c5      	lsls	r5, r0, #3
 8001280:	18e8      	adds	r0, r5, r3
 8001282:	f144 0100 	adc.w	r1, r4, #0
 8001286:	028b      	lsls	r3, r1, #10
 8001288:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 800128c:	0284      	lsls	r4, r0, #10
 800128e:	4620      	mov	r0, r4
 8001290:	4619      	mov	r1, r3
 8001292:	2300      	movs	r3, #0
 8001294:	f7ff f824 	bl	80002e0 <__aeabi_uldivmod>
 8001298:	e7d5      	b.n	8001246 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 800129a:	4803      	ldr	r0, [pc, #12]	; (80012a8 <HAL_RCC_GetSysClockFreq+0x98>)
 800129c:	e000      	b.n	80012a0 <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800129e:	4803      	ldr	r0, [pc, #12]	; (80012ac <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80012a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800
 80012a8:	017d7840 	.word	0x017d7840
 80012ac:	00f42400 	.word	0x00f42400

080012b0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80012b0:	2800      	cmp	r0, #0
 80012b2:	f000 80a0 	beq.w	80013f6 <HAL_RCC_ClockConfig+0x146>
{
 80012b6:	b570      	push	{r4, r5, r6, lr}
 80012b8:	460d      	mov	r5, r1
 80012ba:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012bc:	4b52      	ldr	r3, [pc, #328]	; (8001408 <HAL_RCC_ClockConfig+0x158>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 030f 	and.w	r3, r3, #15
 80012c4:	428b      	cmp	r3, r1
 80012c6:	d20b      	bcs.n	80012e0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012c8:	4a4f      	ldr	r2, [pc, #316]	; (8001408 <HAL_RCC_ClockConfig+0x158>)
 80012ca:	6813      	ldr	r3, [r2, #0]
 80012cc:	f023 030f 	bic.w	r3, r3, #15
 80012d0:	430b      	orrs	r3, r1
 80012d2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012d4:	6813      	ldr	r3, [r2, #0]
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	428b      	cmp	r3, r1
 80012dc:	f040 808d 	bne.w	80013fa <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012e0:	6823      	ldr	r3, [r4, #0]
 80012e2:	f013 0f02 	tst.w	r3, #2
 80012e6:	d017      	beq.n	8001318 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e8:	f013 0f04 	tst.w	r3, #4
 80012ec:	d004      	beq.n	80012f8 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012ee:	4a47      	ldr	r2, [pc, #284]	; (800140c <HAL_RCC_ClockConfig+0x15c>)
 80012f0:	6893      	ldr	r3, [r2, #8]
 80012f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012f6:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012f8:	6823      	ldr	r3, [r4, #0]
 80012fa:	f013 0f08 	tst.w	r3, #8
 80012fe:	d004      	beq.n	800130a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001300:	4a42      	ldr	r2, [pc, #264]	; (800140c <HAL_RCC_ClockConfig+0x15c>)
 8001302:	6893      	ldr	r3, [r2, #8]
 8001304:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001308:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800130a:	4a40      	ldr	r2, [pc, #256]	; (800140c <HAL_RCC_ClockConfig+0x15c>)
 800130c:	6893      	ldr	r3, [r2, #8]
 800130e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001312:	68a1      	ldr	r1, [r4, #8]
 8001314:	430b      	orrs	r3, r1
 8001316:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001318:	6823      	ldr	r3, [r4, #0]
 800131a:	f013 0f01 	tst.w	r3, #1
 800131e:	d031      	beq.n	8001384 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001320:	6863      	ldr	r3, [r4, #4]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d020      	beq.n	8001368 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001326:	2b02      	cmp	r3, #2
 8001328:	d025      	beq.n	8001376 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132a:	4a38      	ldr	r2, [pc, #224]	; (800140c <HAL_RCC_ClockConfig+0x15c>)
 800132c:	6812      	ldr	r2, [r2, #0]
 800132e:	f012 0f02 	tst.w	r2, #2
 8001332:	d064      	beq.n	80013fe <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001334:	4935      	ldr	r1, [pc, #212]	; (800140c <HAL_RCC_ClockConfig+0x15c>)
 8001336:	688a      	ldr	r2, [r1, #8]
 8001338:	f022 0203 	bic.w	r2, r2, #3
 800133c:	4313      	orrs	r3, r2
 800133e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001340:	f7ff fba2 	bl	8000a88 <HAL_GetTick>
 8001344:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001346:	4b31      	ldr	r3, [pc, #196]	; (800140c <HAL_RCC_ClockConfig+0x15c>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f003 030c 	and.w	r3, r3, #12
 800134e:	6862      	ldr	r2, [r4, #4]
 8001350:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001354:	d016      	beq.n	8001384 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001356:	f7ff fb97 	bl	8000a88 <HAL_GetTick>
 800135a:	1b80      	subs	r0, r0, r6
 800135c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001360:	4298      	cmp	r0, r3
 8001362:	d9f0      	bls.n	8001346 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8001364:	2003      	movs	r0, #3
 8001366:	e045      	b.n	80013f4 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001368:	4a28      	ldr	r2, [pc, #160]	; (800140c <HAL_RCC_ClockConfig+0x15c>)
 800136a:	6812      	ldr	r2, [r2, #0]
 800136c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001370:	d1e0      	bne.n	8001334 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001372:	2001      	movs	r0, #1
 8001374:	e03e      	b.n	80013f4 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001376:	4a25      	ldr	r2, [pc, #148]	; (800140c <HAL_RCC_ClockConfig+0x15c>)
 8001378:	6812      	ldr	r2, [r2, #0]
 800137a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800137e:	d1d9      	bne.n	8001334 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001380:	2001      	movs	r0, #1
 8001382:	e037      	b.n	80013f4 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001384:	4b20      	ldr	r3, [pc, #128]	; (8001408 <HAL_RCC_ClockConfig+0x158>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 030f 	and.w	r3, r3, #15
 800138c:	42ab      	cmp	r3, r5
 800138e:	d90a      	bls.n	80013a6 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001390:	4a1d      	ldr	r2, [pc, #116]	; (8001408 <HAL_RCC_ClockConfig+0x158>)
 8001392:	6813      	ldr	r3, [r2, #0]
 8001394:	f023 030f 	bic.w	r3, r3, #15
 8001398:	432b      	orrs	r3, r5
 800139a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800139c:	6813      	ldr	r3, [r2, #0]
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	42ab      	cmp	r3, r5
 80013a4:	d12d      	bne.n	8001402 <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a6:	6823      	ldr	r3, [r4, #0]
 80013a8:	f013 0f04 	tst.w	r3, #4
 80013ac:	d006      	beq.n	80013bc <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013ae:	4a17      	ldr	r2, [pc, #92]	; (800140c <HAL_RCC_ClockConfig+0x15c>)
 80013b0:	6893      	ldr	r3, [r2, #8]
 80013b2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80013b6:	68e1      	ldr	r1, [r4, #12]
 80013b8:	430b      	orrs	r3, r1
 80013ba:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013bc:	6823      	ldr	r3, [r4, #0]
 80013be:	f013 0f08 	tst.w	r3, #8
 80013c2:	d007      	beq.n	80013d4 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013c4:	4a11      	ldr	r2, [pc, #68]	; (800140c <HAL_RCC_ClockConfig+0x15c>)
 80013c6:	6893      	ldr	r3, [r2, #8]
 80013c8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80013cc:	6921      	ldr	r1, [r4, #16]
 80013ce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80013d2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013d4:	f7ff ff1c 	bl	8001210 <HAL_RCC_GetSysClockFreq>
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <HAL_RCC_ClockConfig+0x15c>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80013e0:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <HAL_RCC_ClockConfig+0x160>)
 80013e2:	5cd3      	ldrb	r3, [r2, r3]
 80013e4:	40d8      	lsrs	r0, r3
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_RCC_ClockConfig+0x164>)
 80013e8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_RCC_ClockConfig+0x168>)
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	f7ff fb05 	bl	80009fc <HAL_InitTick>
  return HAL_OK;
 80013f2:	2000      	movs	r0, #0
}
 80013f4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80013f6:	2001      	movs	r0, #1
}
 80013f8:	4770      	bx	lr
      return HAL_ERROR;
 80013fa:	2001      	movs	r0, #1
 80013fc:	e7fa      	b.n	80013f4 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 80013fe:	2001      	movs	r0, #1
 8001400:	e7f8      	b.n	80013f4 <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 8001402:	2001      	movs	r0, #1
 8001404:	e7f6      	b.n	80013f4 <HAL_RCC_ClockConfig+0x144>
 8001406:	bf00      	nop
 8001408:	40023c00 	.word	0x40023c00
 800140c:	40023800 	.word	0x40023800
 8001410:	08002fe8 	.word	0x08002fe8
 8001414:	20000000 	.word	0x20000000
 8001418:	20000008 	.word	0x20000008

0800141c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800141c:	4b01      	ldr	r3, [pc, #4]	; (8001424 <HAL_RCC_GetHCLKFreq+0x8>)
 800141e:	6818      	ldr	r0, [r3, #0]
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000000 	.word	0x20000000

08001428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001428:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800142a:	f7ff fff7 	bl	800141c <HAL_RCC_GetHCLKFreq>
 800142e:	4b04      	ldr	r3, [pc, #16]	; (8001440 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001436:	4a03      	ldr	r2, [pc, #12]	; (8001444 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001438:	5cd3      	ldrb	r3, [r2, r3]
}
 800143a:	40d8      	lsrs	r0, r3
 800143c:	bd08      	pop	{r3, pc}
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800
 8001444:	08002ff8 	.word	0x08002ff8

08001448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001448:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800144a:	f7ff ffe7 	bl	800141c <HAL_RCC_GetHCLKFreq>
 800144e:	4b04      	ldr	r3, [pc, #16]	; (8001460 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001456:	4a03      	ldr	r2, [pc, #12]	; (8001464 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001458:	5cd3      	ldrb	r3, [r2, r3]
}
 800145a:	40d8      	lsrs	r0, r3
 800145c:	bd08      	pop	{r3, pc}
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800
 8001464:	08002ff8 	.word	0x08002ff8

08001468 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001468:	b538      	push	{r3, r4, r5, lr}
 800146a:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800146c:	6883      	ldr	r3, [r0, #8]
 800146e:	6902      	ldr	r2, [r0, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	6942      	ldr	r2, [r0, #20]
 8001474:	4313      	orrs	r3, r2
 8001476:	69c2      	ldr	r2, [r0, #28]
 8001478:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800147a:	6801      	ldr	r1, [r0, #0]
 800147c:	6808      	ldr	r0, [r1, #0]
 800147e:	4a9f      	ldr	r2, [pc, #636]	; (80016fc <UART_SetConfig+0x294>)
 8001480:	4002      	ands	r2, r0
 8001482:	4313      	orrs	r3, r2
 8001484:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001486:	6822      	ldr	r2, [r4, #0]
 8001488:	6853      	ldr	r3, [r2, #4]
 800148a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800148e:	68e1      	ldr	r1, [r4, #12]
 8001490:	430b      	orrs	r3, r1
 8001492:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001494:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 8001496:	6a23      	ldr	r3, [r4, #32]
 8001498:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800149a:	6821      	ldr	r1, [r4, #0]
 800149c:	688b      	ldr	r3, [r1, #8]
 800149e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80014a2:	4313      	orrs	r3, r2
 80014a4:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80014a6:	6823      	ldr	r3, [r4, #0]
 80014a8:	4a95      	ldr	r2, [pc, #596]	; (8001700 <UART_SetConfig+0x298>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d019      	beq.n	80014e2 <UART_SetConfig+0x7a>
 80014ae:	4a95      	ldr	r2, [pc, #596]	; (8001704 <UART_SetConfig+0x29c>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d029      	beq.n	8001508 <UART_SetConfig+0xa0>
 80014b4:	4a94      	ldr	r2, [pc, #592]	; (8001708 <UART_SetConfig+0x2a0>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d03e      	beq.n	8001538 <UART_SetConfig+0xd0>
 80014ba:	4a94      	ldr	r2, [pc, #592]	; (800170c <UART_SetConfig+0x2a4>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d062      	beq.n	8001586 <UART_SetConfig+0x11e>
 80014c0:	4a93      	ldr	r2, [pc, #588]	; (8001710 <UART_SetConfig+0x2a8>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d071      	beq.n	80015aa <UART_SetConfig+0x142>
 80014c6:	4a93      	ldr	r2, [pc, #588]	; (8001714 <UART_SetConfig+0x2ac>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	f000 8083 	beq.w	80015d4 <UART_SetConfig+0x16c>
 80014ce:	4a92      	ldr	r2, [pc, #584]	; (8001718 <UART_SetConfig+0x2b0>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	f000 8094 	beq.w	80015fe <UART_SetConfig+0x196>
 80014d6:	4a91      	ldr	r2, [pc, #580]	; (800171c <UART_SetConfig+0x2b4>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	f000 80a5 	beq.w	8001628 <UART_SetConfig+0x1c0>
 80014de:	2510      	movs	r5, #16
 80014e0:	e03a      	b.n	8001558 <UART_SetConfig+0xf0>
 80014e2:	4b8f      	ldr	r3, [pc, #572]	; (8001720 <UART_SetConfig+0x2b8>)
 80014e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	d809      	bhi.n	8001504 <UART_SetConfig+0x9c>
 80014f0:	e8df f003 	tbb	[pc, r3]
 80014f4:	06ae0402 	.word	0x06ae0402
 80014f8:	2501      	movs	r5, #1
 80014fa:	e02d      	b.n	8001558 <UART_SetConfig+0xf0>
 80014fc:	2504      	movs	r5, #4
 80014fe:	e02b      	b.n	8001558 <UART_SetConfig+0xf0>
 8001500:	2508      	movs	r5, #8
 8001502:	e029      	b.n	8001558 <UART_SetConfig+0xf0>
 8001504:	2510      	movs	r5, #16
 8001506:	e027      	b.n	8001558 <UART_SetConfig+0xf0>
 8001508:	4b85      	ldr	r3, [pc, #532]	; (8001720 <UART_SetConfig+0x2b8>)
 800150a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800150e:	f003 030c 	and.w	r3, r3, #12
 8001512:	2b0c      	cmp	r3, #12
 8001514:	d80e      	bhi.n	8001534 <UART_SetConfig+0xcc>
 8001516:	e8df f003 	tbb	[pc, r3]
 800151a:	0d07      	.short	0x0d07
 800151c:	0d090d0d 	.word	0x0d090d0d
 8001520:	0d9d0d0d 	.word	0x0d9d0d0d
 8001524:	0d0d      	.short	0x0d0d
 8001526:	0b          	.byte	0x0b
 8001527:	00          	.byte	0x00
 8001528:	2500      	movs	r5, #0
 800152a:	e015      	b.n	8001558 <UART_SetConfig+0xf0>
 800152c:	2504      	movs	r5, #4
 800152e:	e013      	b.n	8001558 <UART_SetConfig+0xf0>
 8001530:	2508      	movs	r5, #8
 8001532:	e011      	b.n	8001558 <UART_SetConfig+0xf0>
 8001534:	2510      	movs	r5, #16
 8001536:	e00f      	b.n	8001558 <UART_SetConfig+0xf0>
 8001538:	4b79      	ldr	r3, [pc, #484]	; (8001720 <UART_SetConfig+0x2b8>)
 800153a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800153e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001542:	2b20      	cmp	r3, #32
 8001544:	f000 8088 	beq.w	8001658 <UART_SetConfig+0x1f0>
 8001548:	d819      	bhi.n	800157e <UART_SetConfig+0x116>
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 8086 	beq.w	800165c <UART_SetConfig+0x1f4>
 8001550:	2b10      	cmp	r3, #16
 8001552:	f040 8085 	bne.w	8001660 <UART_SetConfig+0x1f8>
 8001556:	2504      	movs	r5, #4

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001558:	69e3      	ldr	r3, [r4, #28]
 800155a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800155e:	f000 80ab 	beq.w	80016b8 <UART_SetConfig+0x250>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8001562:	2d08      	cmp	r5, #8
 8001564:	f200 8140 	bhi.w	80017e8 <UART_SetConfig+0x380>
 8001568:	e8df f015 	tbh	[pc, r5, lsl #1]
 800156c:	01180107 	.word	0x01180107
 8001570:	013e0122 	.word	0x013e0122
 8001574:	013e012b 	.word	0x013e012b
 8001578:	013e013e 	.word	0x013e013e
 800157c:	0135      	.short	0x0135
  UART_GETCLOCKSOURCE(huart, clocksource);
 800157e:	2b30      	cmp	r3, #48	; 0x30
 8001580:	d170      	bne.n	8001664 <UART_SetConfig+0x1fc>
 8001582:	2508      	movs	r5, #8
 8001584:	e7e8      	b.n	8001558 <UART_SetConfig+0xf0>
 8001586:	4b66      	ldr	r3, [pc, #408]	; (8001720 <UART_SetConfig+0x2b8>)
 8001588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800158c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001590:	2b80      	cmp	r3, #128	; 0x80
 8001592:	d069      	beq.n	8001668 <UART_SetConfig+0x200>
 8001594:	d805      	bhi.n	80015a2 <UART_SetConfig+0x13a>
 8001596:	2b00      	cmp	r3, #0
 8001598:	d068      	beq.n	800166c <UART_SetConfig+0x204>
 800159a:	2b40      	cmp	r3, #64	; 0x40
 800159c:	d168      	bne.n	8001670 <UART_SetConfig+0x208>
 800159e:	2504      	movs	r5, #4
 80015a0:	e7da      	b.n	8001558 <UART_SetConfig+0xf0>
 80015a2:	2bc0      	cmp	r3, #192	; 0xc0
 80015a4:	d166      	bne.n	8001674 <UART_SetConfig+0x20c>
 80015a6:	2508      	movs	r5, #8
 80015a8:	e7d6      	b.n	8001558 <UART_SetConfig+0xf0>
 80015aa:	4b5d      	ldr	r3, [pc, #372]	; (8001720 <UART_SetConfig+0x2b8>)
 80015ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015b8:	d05e      	beq.n	8001678 <UART_SetConfig+0x210>
 80015ba:	d806      	bhi.n	80015ca <UART_SetConfig+0x162>
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d05d      	beq.n	800167c <UART_SetConfig+0x214>
 80015c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015c4:	d15c      	bne.n	8001680 <UART_SetConfig+0x218>
 80015c6:	2504      	movs	r5, #4
 80015c8:	e7c6      	b.n	8001558 <UART_SetConfig+0xf0>
 80015ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80015ce:	d159      	bne.n	8001684 <UART_SetConfig+0x21c>
 80015d0:	2508      	movs	r5, #8
 80015d2:	e7c1      	b.n	8001558 <UART_SetConfig+0xf0>
 80015d4:	4b52      	ldr	r3, [pc, #328]	; (8001720 <UART_SetConfig+0x2b8>)
 80015d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015da:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015e2:	d051      	beq.n	8001688 <UART_SetConfig+0x220>
 80015e4:	d806      	bhi.n	80015f4 <UART_SetConfig+0x18c>
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d050      	beq.n	800168c <UART_SetConfig+0x224>
 80015ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ee:	d14f      	bne.n	8001690 <UART_SetConfig+0x228>
 80015f0:	2504      	movs	r5, #4
 80015f2:	e7b1      	b.n	8001558 <UART_SetConfig+0xf0>
 80015f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80015f8:	d14c      	bne.n	8001694 <UART_SetConfig+0x22c>
 80015fa:	2508      	movs	r5, #8
 80015fc:	e7ac      	b.n	8001558 <UART_SetConfig+0xf0>
 80015fe:	4b48      	ldr	r3, [pc, #288]	; (8001720 <UART_SetConfig+0x2b8>)
 8001600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001604:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001608:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800160c:	d044      	beq.n	8001698 <UART_SetConfig+0x230>
 800160e:	d806      	bhi.n	800161e <UART_SetConfig+0x1b6>
 8001610:	2b00      	cmp	r3, #0
 8001612:	d043      	beq.n	800169c <UART_SetConfig+0x234>
 8001614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001618:	d142      	bne.n	80016a0 <UART_SetConfig+0x238>
 800161a:	2504      	movs	r5, #4
 800161c:	e79c      	b.n	8001558 <UART_SetConfig+0xf0>
 800161e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001622:	d13f      	bne.n	80016a4 <UART_SetConfig+0x23c>
 8001624:	2508      	movs	r5, #8
 8001626:	e797      	b.n	8001558 <UART_SetConfig+0xf0>
 8001628:	4b3d      	ldr	r3, [pc, #244]	; (8001720 <UART_SetConfig+0x2b8>)
 800162a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800162e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001636:	d037      	beq.n	80016a8 <UART_SetConfig+0x240>
 8001638:	d805      	bhi.n	8001646 <UART_SetConfig+0x1de>
 800163a:	b3bb      	cbz	r3, 80016ac <UART_SetConfig+0x244>
 800163c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001640:	d136      	bne.n	80016b0 <UART_SetConfig+0x248>
 8001642:	2504      	movs	r5, #4
 8001644:	e788      	b.n	8001558 <UART_SetConfig+0xf0>
 8001646:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800164a:	d133      	bne.n	80016b4 <UART_SetConfig+0x24c>
 800164c:	2508      	movs	r5, #8
 800164e:	e783      	b.n	8001558 <UART_SetConfig+0xf0>
 8001650:	2502      	movs	r5, #2
 8001652:	e781      	b.n	8001558 <UART_SetConfig+0xf0>
 8001654:	2502      	movs	r5, #2
 8001656:	e77f      	b.n	8001558 <UART_SetConfig+0xf0>
 8001658:	2502      	movs	r5, #2
 800165a:	e77d      	b.n	8001558 <UART_SetConfig+0xf0>
 800165c:	2500      	movs	r5, #0
 800165e:	e77b      	b.n	8001558 <UART_SetConfig+0xf0>
 8001660:	2510      	movs	r5, #16
 8001662:	e779      	b.n	8001558 <UART_SetConfig+0xf0>
 8001664:	2510      	movs	r5, #16
 8001666:	e777      	b.n	8001558 <UART_SetConfig+0xf0>
 8001668:	2502      	movs	r5, #2
 800166a:	e775      	b.n	8001558 <UART_SetConfig+0xf0>
 800166c:	2500      	movs	r5, #0
 800166e:	e773      	b.n	8001558 <UART_SetConfig+0xf0>
 8001670:	2510      	movs	r5, #16
 8001672:	e771      	b.n	8001558 <UART_SetConfig+0xf0>
 8001674:	2510      	movs	r5, #16
 8001676:	e76f      	b.n	8001558 <UART_SetConfig+0xf0>
 8001678:	2502      	movs	r5, #2
 800167a:	e76d      	b.n	8001558 <UART_SetConfig+0xf0>
 800167c:	2500      	movs	r5, #0
 800167e:	e76b      	b.n	8001558 <UART_SetConfig+0xf0>
 8001680:	2510      	movs	r5, #16
 8001682:	e769      	b.n	8001558 <UART_SetConfig+0xf0>
 8001684:	2510      	movs	r5, #16
 8001686:	e767      	b.n	8001558 <UART_SetConfig+0xf0>
 8001688:	2502      	movs	r5, #2
 800168a:	e765      	b.n	8001558 <UART_SetConfig+0xf0>
 800168c:	2501      	movs	r5, #1
 800168e:	e763      	b.n	8001558 <UART_SetConfig+0xf0>
 8001690:	2510      	movs	r5, #16
 8001692:	e761      	b.n	8001558 <UART_SetConfig+0xf0>
 8001694:	2510      	movs	r5, #16
 8001696:	e75f      	b.n	8001558 <UART_SetConfig+0xf0>
 8001698:	2502      	movs	r5, #2
 800169a:	e75d      	b.n	8001558 <UART_SetConfig+0xf0>
 800169c:	2500      	movs	r5, #0
 800169e:	e75b      	b.n	8001558 <UART_SetConfig+0xf0>
 80016a0:	2510      	movs	r5, #16
 80016a2:	e759      	b.n	8001558 <UART_SetConfig+0xf0>
 80016a4:	2510      	movs	r5, #16
 80016a6:	e757      	b.n	8001558 <UART_SetConfig+0xf0>
 80016a8:	2502      	movs	r5, #2
 80016aa:	e755      	b.n	8001558 <UART_SetConfig+0xf0>
 80016ac:	2500      	movs	r5, #0
 80016ae:	e753      	b.n	8001558 <UART_SetConfig+0xf0>
 80016b0:	2510      	movs	r5, #16
 80016b2:	e751      	b.n	8001558 <UART_SetConfig+0xf0>
 80016b4:	2510      	movs	r5, #16
 80016b6:	e74f      	b.n	8001558 <UART_SetConfig+0xf0>
    switch (clocksource)
 80016b8:	2d08      	cmp	r5, #8
 80016ba:	d85b      	bhi.n	8001774 <UART_SetConfig+0x30c>
 80016bc:	e8df f005 	tbb	[pc, r5]
 80016c0:	5a3d3205 	.word	0x5a3d3205
 80016c4:	5a5a5a46 	.word	0x5a5a5a46
 80016c8:	51          	.byte	0x51
 80016c9:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 80016ca:	f7ff fead 	bl	8001428 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80016ce:	6862      	ldr	r2, [r4, #4]
 80016d0:	0853      	lsrs	r3, r2, #1
 80016d2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80016d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80016da:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80016dc:	f1a3 0110 	sub.w	r1, r3, #16
 80016e0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80016e4:	4291      	cmp	r1, r2
 80016e6:	f200 8082 	bhi.w	80017ee <UART_SetConfig+0x386>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80016f0:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80016f4:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 80016f6:	6822      	ldr	r2, [r4, #0]
 80016f8:	60d3      	str	r3, [r2, #12]
 80016fa:	e07b      	b.n	80017f4 <UART_SetConfig+0x38c>
 80016fc:	efff69f3 	.word	0xefff69f3
 8001700:	40011000 	.word	0x40011000
 8001704:	40004400 	.word	0x40004400
 8001708:	40004800 	.word	0x40004800
 800170c:	40004c00 	.word	0x40004c00
 8001710:	40005000 	.word	0x40005000
 8001714:	40011400 	.word	0x40011400
 8001718:	40007800 	.word	0x40007800
 800171c:	40007c00 	.word	0x40007c00
 8001720:	40023800 	.word	0x40023800
        pclk = HAL_RCC_GetPCLK2Freq();
 8001724:	f7ff fe90 	bl	8001448 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001728:	6862      	ldr	r2, [r4, #4]
 800172a:	0853      	lsrs	r3, r2, #1
 800172c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001730:	fbb3 f3f2 	udiv	r3, r3, r2
 8001734:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001736:	2500      	movs	r5, #0
        break;
 8001738:	e7d0      	b.n	80016dc <UART_SetConfig+0x274>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800173a:	6862      	ldr	r2, [r4, #4]
 800173c:	4b30      	ldr	r3, [pc, #192]	; (8001800 <UART_SetConfig+0x398>)
 800173e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8001742:	fbb3 f3f2 	udiv	r3, r3, r2
 8001746:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001748:	2500      	movs	r5, #0
        break;
 800174a:	e7c7      	b.n	80016dc <UART_SetConfig+0x274>
        pclk = HAL_RCC_GetSysClockFreq();
 800174c:	f7ff fd60 	bl	8001210 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001750:	6862      	ldr	r2, [r4, #4]
 8001752:	0853      	lsrs	r3, r2, #1
 8001754:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001758:	fbb3 f3f2 	udiv	r3, r3, r2
 800175c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800175e:	2500      	movs	r5, #0
        break;
 8001760:	e7bc      	b.n	80016dc <UART_SetConfig+0x274>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001762:	6862      	ldr	r2, [r4, #4]
 8001764:	0853      	lsrs	r3, r2, #1
 8001766:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800176a:	fbb3 f3f2 	udiv	r3, r3, r2
 800176e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001770:	2500      	movs	r5, #0
        break;
 8001772:	e7b3      	b.n	80016dc <UART_SetConfig+0x274>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001774:	2501      	movs	r5, #1
 8001776:	2300      	movs	r3, #0
 8001778:	e7b0      	b.n	80016dc <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800177a:	f7ff fe55 	bl	8001428 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800177e:	6862      	ldr	r2, [r4, #4]
 8001780:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001784:	fbb3 f3f2 	udiv	r3, r3, r2
 8001788:	b29b      	uxth	r3, r3
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800178a:	f1a3 0110 	sub.w	r1, r3, #16
 800178e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001792:	4291      	cmp	r1, r2
 8001794:	d82d      	bhi.n	80017f2 <UART_SetConfig+0x38a>
    {
      huart->Instance->BRR = usartdiv;
 8001796:	6822      	ldr	r2, [r4, #0]
 8001798:	60d3      	str	r3, [r2, #12]
 800179a:	e02b      	b.n	80017f4 <UART_SetConfig+0x38c>
        pclk = HAL_RCC_GetPCLK2Freq();
 800179c:	f7ff fe54 	bl	8001448 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80017a0:	6862      	ldr	r2, [r4, #4]
 80017a2:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80017a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80017aa:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80017ac:	2500      	movs	r5, #0
        break;
 80017ae:	e7ec      	b.n	800178a <UART_SetConfig+0x322>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80017b0:	6862      	ldr	r2, [r4, #4]
 80017b2:	4b14      	ldr	r3, [pc, #80]	; (8001804 <UART_SetConfig+0x39c>)
 80017b4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80017b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80017bc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80017be:	2500      	movs	r5, #0
        break;
 80017c0:	e7e3      	b.n	800178a <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetSysClockFreq();
 80017c2:	f7ff fd25 	bl	8001210 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80017c6:	6862      	ldr	r2, [r4, #4]
 80017c8:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80017cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80017d0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80017d2:	2500      	movs	r5, #0
        break;
 80017d4:	e7d9      	b.n	800178a <UART_SetConfig+0x322>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80017d6:	6862      	ldr	r2, [r4, #4]
 80017d8:	0853      	lsrs	r3, r2, #1
 80017da:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80017de:	fbb3 f3f2 	udiv	r3, r3, r2
 80017e2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80017e4:	2500      	movs	r5, #0
        break;
 80017e6:	e7d0      	b.n	800178a <UART_SetConfig+0x322>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80017e8:	2501      	movs	r5, #1
 80017ea:	2300      	movs	r3, #0
 80017ec:	e7cd      	b.n	800178a <UART_SetConfig+0x322>
      ret = HAL_ERROR;
 80017ee:	2501      	movs	r5, #1
 80017f0:	e000      	b.n	80017f4 <UART_SetConfig+0x38c>
    }
    else
    {
      ret = HAL_ERROR;
 80017f2:	2501      	movs	r5, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80017f8:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 80017fa:	4628      	mov	r0, r5
 80017fc:	bd38      	pop	{r3, r4, r5, pc}
 80017fe:	bf00      	nop
 8001800:	01e84800 	.word	0x01e84800
 8001804:	00f42400 	.word	0x00f42400

08001808 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001808:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800180a:	f013 0f01 	tst.w	r3, #1
 800180e:	d006      	beq.n	800181e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001810:	6802      	ldr	r2, [r0, #0]
 8001812:	6853      	ldr	r3, [r2, #4]
 8001814:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001818:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800181a:	430b      	orrs	r3, r1
 800181c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800181e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001820:	f013 0f02 	tst.w	r3, #2
 8001824:	d006      	beq.n	8001834 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001826:	6802      	ldr	r2, [r0, #0]
 8001828:	6853      	ldr	r3, [r2, #4]
 800182a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800182e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001830:	430b      	orrs	r3, r1
 8001832:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001834:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001836:	f013 0f04 	tst.w	r3, #4
 800183a:	d006      	beq.n	800184a <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800183c:	6802      	ldr	r2, [r0, #0]
 800183e:	6853      	ldr	r3, [r2, #4]
 8001840:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001844:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001846:	430b      	orrs	r3, r1
 8001848:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800184a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800184c:	f013 0f08 	tst.w	r3, #8
 8001850:	d006      	beq.n	8001860 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001852:	6802      	ldr	r2, [r0, #0]
 8001854:	6853      	ldr	r3, [r2, #4]
 8001856:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800185a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800185c:	430b      	orrs	r3, r1
 800185e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001860:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001862:	f013 0f10 	tst.w	r3, #16
 8001866:	d006      	beq.n	8001876 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001868:	6802      	ldr	r2, [r0, #0]
 800186a:	6893      	ldr	r3, [r2, #8]
 800186c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001870:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001872:	430b      	orrs	r3, r1
 8001874:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001876:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001878:	f013 0f20 	tst.w	r3, #32
 800187c:	d006      	beq.n	800188c <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800187e:	6802      	ldr	r2, [r0, #0]
 8001880:	6893      	ldr	r3, [r2, #8]
 8001882:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001886:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001888:	430b      	orrs	r3, r1
 800188a:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800188c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800188e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001892:	d00a      	beq.n	80018aa <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001894:	6802      	ldr	r2, [r0, #0]
 8001896:	6853      	ldr	r3, [r2, #4]
 8001898:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800189c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800189e:	430b      	orrs	r3, r1
 80018a0:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80018a2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80018a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018a8:	d00b      	beq.n	80018c2 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80018aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80018ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80018b0:	d006      	beq.n	80018c0 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80018b2:	6802      	ldr	r2, [r0, #0]
 80018b4:	6853      	ldr	r3, [r2, #4]
 80018b6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80018ba:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80018bc:	430b      	orrs	r3, r1
 80018be:	6053      	str	r3, [r2, #4]
  }
}
 80018c0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80018c2:	6802      	ldr	r2, [r0, #0]
 80018c4:	6853      	ldr	r3, [r2, #4]
 80018c6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80018ca:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80018cc:	430b      	orrs	r3, r1
 80018ce:	6053      	str	r3, [r2, #4]
 80018d0:	e7eb      	b.n	80018aa <UART_AdvFeatureConfig+0xa2>

080018d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80018d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018d6:	4605      	mov	r5, r0
 80018d8:	460f      	mov	r7, r1
 80018da:	4616      	mov	r6, r2
 80018dc:	4699      	mov	r9, r3
 80018de:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018e2:	682c      	ldr	r4, [r5, #0]
 80018e4:	69e4      	ldr	r4, [r4, #28]
 80018e6:	ea37 0304 	bics.w	r3, r7, r4
 80018ea:	bf0c      	ite	eq
 80018ec:	2401      	moveq	r4, #1
 80018ee:	2400      	movne	r4, #0
 80018f0:	42b4      	cmp	r4, r6
 80018f2:	d13c      	bne.n	800196e <UART_WaitOnFlagUntilTimeout+0x9c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018f4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80018f8:	d0f3      	beq.n	80018e2 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018fa:	f7ff f8c5 	bl	8000a88 <HAL_GetTick>
 80018fe:	eba0 0009 	sub.w	r0, r0, r9
 8001902:	4540      	cmp	r0, r8
 8001904:	d821      	bhi.n	800194a <UART_WaitOnFlagUntilTimeout+0x78>
 8001906:	f1b8 0f00 	cmp.w	r8, #0
 800190a:	d01e      	beq.n	800194a <UART_WaitOnFlagUntilTimeout+0x78>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800190c:	682b      	ldr	r3, [r5, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	f012 0f04 	tst.w	r2, #4
 8001914:	d0e5      	beq.n	80018e2 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001916:	69da      	ldr	r2, [r3, #28]
 8001918:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800191c:	d0e1      	beq.n	80018e2 <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800191e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001922:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001924:	682a      	ldr	r2, [r5, #0]
 8001926:	6813      	ldr	r3, [r2, #0]
 8001928:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800192c:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800192e:	682a      	ldr	r2, [r5, #0]
 8001930:	6893      	ldr	r3, [r2, #8]
 8001932:	f023 0301 	bic.w	r3, r3, #1
 8001936:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 8001938:	2320      	movs	r3, #32
 800193a:	676b      	str	r3, [r5, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800193c:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800193e:	67eb      	str	r3, [r5, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001940:	2300      	movs	r3, #0
 8001942:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8001946:	2003      	movs	r0, #3
 8001948:	e012      	b.n	8001970 <UART_WaitOnFlagUntilTimeout+0x9e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800194a:	682a      	ldr	r2, [r5, #0]
 800194c:	6813      	ldr	r3, [r2, #0]
 800194e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001952:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001954:	682a      	ldr	r2, [r5, #0]
 8001956:	6893      	ldr	r3, [r2, #8]
 8001958:	f023 0301 	bic.w	r3, r3, #1
 800195c:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 800195e:	2320      	movs	r3, #32
 8001960:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001962:	67ab      	str	r3, [r5, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8001964:	2300      	movs	r3, #0
 8001966:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
        return HAL_TIMEOUT;
 800196a:	2003      	movs	r0, #3
 800196c:	e000      	b.n	8001970 <UART_WaitOnFlagUntilTimeout+0x9e>
        }
      }
    }
  }
  return HAL_OK;
 800196e:	2000      	movs	r0, #0
}
 8001970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001974 <HAL_UART_Transmit>:
{
 8001974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800197c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800197e:	2b20      	cmp	r3, #32
 8001980:	d159      	bne.n	8001a36 <HAL_UART_Transmit+0xc2>
 8001982:	4604      	mov	r4, r0
 8001984:	460d      	mov	r5, r1
 8001986:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001988:	fab2 f382 	clz	r3, r2
 800198c:	095b      	lsrs	r3, r3, #5
 800198e:	2900      	cmp	r1, #0
 8001990:	bf08      	it	eq
 8001992:	2301      	moveq	r3, #1
 8001994:	2b00      	cmp	r3, #0
 8001996:	d152      	bne.n	8001a3e <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 8001998:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800199c:	2b01      	cmp	r3, #1
 800199e:	d050      	beq.n	8001a42 <HAL_UART_Transmit+0xce>
 80019a0:	2301      	movs	r3, #1
 80019a2:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019aa:	2321      	movs	r3, #33	; 0x21
 80019ac:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 80019ae:	f7ff f86b 	bl	8000a88 <HAL_GetTick>
 80019b2:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 80019b4:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80019b8:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019bc:	68a3      	ldr	r3, [r4, #8]
 80019be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019c2:	d005      	beq.n	80019d0 <HAL_UART_Transmit+0x5c>
      pdata16bits = NULL;
 80019c4:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 80019c8:	2300      	movs	r3, #0
 80019ca:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 80019ce:	e014      	b.n	80019fa <HAL_UART_Transmit+0x86>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019d0:	6923      	ldr	r3, [r4, #16]
 80019d2:	b113      	cbz	r3, 80019da <HAL_UART_Transmit+0x66>
      pdata16bits = NULL;
 80019d4:	f04f 0800 	mov.w	r8, #0
 80019d8:	e7f6      	b.n	80019c8 <HAL_UART_Transmit+0x54>
      pdata16bits = (uint16_t *) pData;
 80019da:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80019dc:	2500      	movs	r5, #0
 80019de:	e7f3      	b.n	80019c8 <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80019e0:	f838 3b02 	ldrh.w	r3, [r8], #2
 80019e4:	6822      	ldr	r2, [r4, #0]
 80019e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ea:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80019ec:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80019f0:	b292      	uxth	r2, r2
 80019f2:	3a01      	subs	r2, #1
 80019f4:	b292      	uxth	r2, r2
 80019f6:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80019fa:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	b173      	cbz	r3, 8001a20 <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a02:	9600      	str	r6, [sp, #0]
 8001a04:	463b      	mov	r3, r7
 8001a06:	2200      	movs	r2, #0
 8001a08:	2180      	movs	r1, #128	; 0x80
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	f7ff ff61 	bl	80018d2 <UART_WaitOnFlagUntilTimeout>
 8001a10:	b9c8      	cbnz	r0, 8001a46 <HAL_UART_Transmit+0xd2>
      if (pdata8bits == NULL)
 8001a12:	2d00      	cmp	r5, #0
 8001a14:	d0e4      	beq.n	80019e0 <HAL_UART_Transmit+0x6c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a16:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001a1a:	6823      	ldr	r3, [r4, #0]
 8001a1c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001a1e:	e7e5      	b.n	80019ec <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a20:	9600      	str	r6, [sp, #0]
 8001a22:	463b      	mov	r3, r7
 8001a24:	2200      	movs	r2, #0
 8001a26:	2140      	movs	r1, #64	; 0x40
 8001a28:	4620      	mov	r0, r4
 8001a2a:	f7ff ff52 	bl	80018d2 <UART_WaitOnFlagUntilTimeout>
 8001a2e:	b960      	cbnz	r0, 8001a4a <HAL_UART_Transmit+0xd6>
    huart->gState = HAL_UART_STATE_READY;
 8001a30:	2320      	movs	r3, #32
 8001a32:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8001a34:	e000      	b.n	8001a38 <HAL_UART_Transmit+0xc4>
    return HAL_BUSY;
 8001a36:	2002      	movs	r0, #2
}
 8001a38:	b002      	add	sp, #8
 8001a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001a3e:	2001      	movs	r0, #1
 8001a40:	e7fa      	b.n	8001a38 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8001a42:	2002      	movs	r0, #2
 8001a44:	e7f8      	b.n	8001a38 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8001a46:	2003      	movs	r0, #3
 8001a48:	e7f6      	b.n	8001a38 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8001a4a:	2003      	movs	r0, #3
 8001a4c:	e7f4      	b.n	8001a38 <HAL_UART_Transmit+0xc4>

08001a4e <HAL_UART_Receive>:
{
 8001a4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a52:	b083      	sub	sp, #12
 8001a54:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001a56:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001a58:	2b20      	cmp	r3, #32
 8001a5a:	f040 8081 	bne.w	8001b60 <HAL_UART_Receive+0x112>
 8001a5e:	4604      	mov	r4, r0
 8001a60:	460d      	mov	r5, r1
 8001a62:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001a64:	fab2 f382 	clz	r3, r2
 8001a68:	095b      	lsrs	r3, r3, #5
 8001a6a:	2900      	cmp	r1, #0
 8001a6c:	bf08      	it	eq
 8001a6e:	2301      	moveq	r3, #1
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d179      	bne.n	8001b68 <HAL_UART_Receive+0x11a>
    __HAL_LOCK(huart);
 8001a74:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d077      	beq.n	8001b6c <HAL_UART_Receive+0x11e>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001a86:	2322      	movs	r3, #34	; 0x22
 8001a88:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8001a8a:	f7fe fffd 	bl	8000a88 <HAL_GetTick>
 8001a8e:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 8001a90:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 8001a94:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8001a98:	68a3      	ldr	r3, [r4, #8]
 8001a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a9e:	d006      	beq.n	8001aae <HAL_UART_Receive+0x60>
 8001aa0:	b9a3      	cbnz	r3, 8001acc <HAL_UART_Receive+0x7e>
 8001aa2:	6922      	ldr	r2, [r4, #16]
 8001aa4:	b972      	cbnz	r2, 8001ac4 <HAL_UART_Receive+0x76>
 8001aa6:	22ff      	movs	r2, #255	; 0xff
 8001aa8:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001aac:	e014      	b.n	8001ad8 <HAL_UART_Receive+0x8a>
 8001aae:	6922      	ldr	r2, [r4, #16]
 8001ab0:	b922      	cbnz	r2, 8001abc <HAL_UART_Receive+0x6e>
 8001ab2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001ab6:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001aba:	e00d      	b.n	8001ad8 <HAL_UART_Receive+0x8a>
 8001abc:	22ff      	movs	r2, #255	; 0xff
 8001abe:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001ac2:	e009      	b.n	8001ad8 <HAL_UART_Receive+0x8a>
 8001ac4:	227f      	movs	r2, #127	; 0x7f
 8001ac6:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001aca:	e005      	b.n	8001ad8 <HAL_UART_Receive+0x8a>
 8001acc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ad0:	d00d      	beq.n	8001aee <HAL_UART_Receive+0xa0>
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8001ad8:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ae0:	d00f      	beq.n	8001b02 <HAL_UART_Receive+0xb4>
      pdata16bits = NULL;
 8001ae2:	f04f 0900 	mov.w	r9, #0
    __HAL_UNLOCK(huart);
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->RxXferCount > 0U)
 8001aec:	e01e      	b.n	8001b2c <HAL_UART_Receive+0xde>
    UART_MASK_COMPUTATION(huart);
 8001aee:	6922      	ldr	r2, [r4, #16]
 8001af0:	b91a      	cbnz	r2, 8001afa <HAL_UART_Receive+0xac>
 8001af2:	227f      	movs	r2, #127	; 0x7f
 8001af4:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001af8:	e7ee      	b.n	8001ad8 <HAL_UART_Receive+0x8a>
 8001afa:	223f      	movs	r2, #63	; 0x3f
 8001afc:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001b00:	e7ea      	b.n	8001ad8 <HAL_UART_Receive+0x8a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b02:	6923      	ldr	r3, [r4, #16]
 8001b04:	b113      	cbz	r3, 8001b0c <HAL_UART_Receive+0xbe>
      pdata16bits = NULL;
 8001b06:	f04f 0900 	mov.w	r9, #0
 8001b0a:	e7ec      	b.n	8001ae6 <HAL_UART_Receive+0x98>
      pdata16bits = (uint16_t *) pData;
 8001b0c:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8001b0e:	2500      	movs	r5, #0
 8001b10:	e7e9      	b.n	8001ae6 <HAL_UART_Receive+0x98>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001b12:	6823      	ldr	r3, [r4, #0]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	ea08 0303 	and.w	r3, r8, r3
 8001b1a:	f829 3b02 	strh.w	r3, [r9], #2
      huart->RxXferCount--;
 8001b1e:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8001b22:	b292      	uxth	r2, r2
 8001b24:	3a01      	subs	r2, #1
 8001b26:	b292      	uxth	r2, r2
 8001b28:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8001b2c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	b18b      	cbz	r3, 8001b58 <HAL_UART_Receive+0x10a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001b34:	9600      	str	r6, [sp, #0]
 8001b36:	463b      	mov	r3, r7
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2120      	movs	r1, #32
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	f7ff fec8 	bl	80018d2 <UART_WaitOnFlagUntilTimeout>
 8001b42:	b9a8      	cbnz	r0, 8001b70 <HAL_UART_Receive+0x122>
      if (pdata8bits == NULL)
 8001b44:	2d00      	cmp	r5, #0
 8001b46:	d0e4      	beq.n	8001b12 <HAL_UART_Receive+0xc4>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b4c:	fa5f f388 	uxtb.w	r3, r8
 8001b50:	4013      	ands	r3, r2
 8001b52:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 8001b56:	e7e2      	b.n	8001b1e <HAL_UART_Receive+0xd0>
    huart->RxState = HAL_UART_STATE_READY;
 8001b58:	2320      	movs	r3, #32
 8001b5a:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	e000      	b.n	8001b62 <HAL_UART_Receive+0x114>
    return HAL_BUSY;
 8001b60:	2002      	movs	r0, #2
}
 8001b62:	b003      	add	sp, #12
 8001b64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8001b68:	2001      	movs	r0, #1
 8001b6a:	e7fa      	b.n	8001b62 <HAL_UART_Receive+0x114>
    __HAL_LOCK(huart);
 8001b6c:	2002      	movs	r0, #2
 8001b6e:	e7f8      	b.n	8001b62 <HAL_UART_Receive+0x114>
        return HAL_TIMEOUT;
 8001b70:	2003      	movs	r0, #3
 8001b72:	e7f6      	b.n	8001b62 <HAL_UART_Receive+0x114>

08001b74 <UART_CheckIdleState>:
{
 8001b74:	b530      	push	{r4, r5, lr}
 8001b76:	b083      	sub	sp, #12
 8001b78:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001b7e:	f7fe ff83 	bl	8000a88 <HAL_GetTick>
 8001b82:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001b84:	6823      	ldr	r3, [r4, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f013 0f08 	tst.w	r3, #8
 8001b8c:	d10c      	bne.n	8001ba8 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001b8e:	6823      	ldr	r3, [r4, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f013 0f04 	tst.w	r3, #4
 8001b96:	d115      	bne.n	8001bc4 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8001b98:	2320      	movs	r3, #32
 8001b9a:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001b9c:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8001ba4:	b003      	add	sp, #12
 8001ba6:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001ba8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	f7ff fe8b 	bl	80018d2 <UART_WaitOnFlagUntilTimeout>
 8001bbc:	2800      	cmp	r0, #0
 8001bbe:	d0e6      	beq.n	8001b8e <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8001bc0:	2003      	movs	r0, #3
 8001bc2:	e7ef      	b.n	8001ba4 <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001bc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	462b      	mov	r3, r5
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	f7ff fe7d 	bl	80018d2 <UART_WaitOnFlagUntilTimeout>
 8001bd8:	2800      	cmp	r0, #0
 8001bda:	d0dd      	beq.n	8001b98 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8001bdc:	2003      	movs	r0, #3
 8001bde:	e7e1      	b.n	8001ba4 <UART_CheckIdleState+0x30>

08001be0 <HAL_UART_Init>:
  if (huart == NULL)
 8001be0:	b368      	cbz	r0, 8001c3e <HAL_UART_Init+0x5e>
{
 8001be2:	b510      	push	{r4, lr}
 8001be4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001be6:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001be8:	b303      	cbz	r3, 8001c2c <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8001bea:	2324      	movs	r3, #36	; 0x24
 8001bec:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001bee:	6822      	ldr	r2, [r4, #0]
 8001bf0:	6813      	ldr	r3, [r2, #0]
 8001bf2:	f023 0301 	bic.w	r3, r3, #1
 8001bf6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001bf8:	4620      	mov	r0, r4
 8001bfa:	f7ff fc35 	bl	8001468 <UART_SetConfig>
 8001bfe:	2801      	cmp	r0, #1
 8001c00:	d013      	beq.n	8001c2a <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c04:	b9bb      	cbnz	r3, 8001c36 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c06:	6822      	ldr	r2, [r4, #0]
 8001c08:	6853      	ldr	r3, [r2, #4]
 8001c0a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001c0e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c10:	6822      	ldr	r2, [r4, #0]
 8001c12:	6893      	ldr	r3, [r2, #8]
 8001c14:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001c18:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001c1a:	6822      	ldr	r2, [r4, #0]
 8001c1c:	6813      	ldr	r3, [r2, #0]
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001c24:	4620      	mov	r0, r4
 8001c26:	f7ff ffa5 	bl	8001b74 <UART_CheckIdleState>
}
 8001c2a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001c2c:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001c30:	f7fe fdec 	bl	800080c <HAL_UART_MspInit>
 8001c34:	e7d9      	b.n	8001bea <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8001c36:	4620      	mov	r0, r4
 8001c38:	f7ff fde6 	bl	8001808 <UART_AdvFeatureConfig>
 8001c3c:	e7e3      	b.n	8001c06 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8001c3e:	2001      	movs	r0, #1
}
 8001c40:	4770      	bx	lr
	...

08001c44 <__sflush_r>:
 8001c44:	898a      	ldrh	r2, [r1, #12]
 8001c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c4a:	4605      	mov	r5, r0
 8001c4c:	0710      	lsls	r0, r2, #28
 8001c4e:	460c      	mov	r4, r1
 8001c50:	d458      	bmi.n	8001d04 <__sflush_r+0xc0>
 8001c52:	684b      	ldr	r3, [r1, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	dc05      	bgt.n	8001c64 <__sflush_r+0x20>
 8001c58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	dc02      	bgt.n	8001c64 <__sflush_r+0x20>
 8001c5e:	2000      	movs	r0, #0
 8001c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c66:	2e00      	cmp	r6, #0
 8001c68:	d0f9      	beq.n	8001c5e <__sflush_r+0x1a>
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001c70:	682f      	ldr	r7, [r5, #0]
 8001c72:	602b      	str	r3, [r5, #0]
 8001c74:	d032      	beq.n	8001cdc <__sflush_r+0x98>
 8001c76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001c78:	89a3      	ldrh	r3, [r4, #12]
 8001c7a:	075a      	lsls	r2, r3, #29
 8001c7c:	d505      	bpl.n	8001c8a <__sflush_r+0x46>
 8001c7e:	6863      	ldr	r3, [r4, #4]
 8001c80:	1ac0      	subs	r0, r0, r3
 8001c82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c84:	b10b      	cbz	r3, 8001c8a <__sflush_r+0x46>
 8001c86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c88:	1ac0      	subs	r0, r0, r3
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c90:	6a21      	ldr	r1, [r4, #32]
 8001c92:	4628      	mov	r0, r5
 8001c94:	47b0      	blx	r6
 8001c96:	1c43      	adds	r3, r0, #1
 8001c98:	89a3      	ldrh	r3, [r4, #12]
 8001c9a:	d106      	bne.n	8001caa <__sflush_r+0x66>
 8001c9c:	6829      	ldr	r1, [r5, #0]
 8001c9e:	291d      	cmp	r1, #29
 8001ca0:	d82c      	bhi.n	8001cfc <__sflush_r+0xb8>
 8001ca2:	4a2a      	ldr	r2, [pc, #168]	; (8001d4c <__sflush_r+0x108>)
 8001ca4:	40ca      	lsrs	r2, r1
 8001ca6:	07d6      	lsls	r6, r2, #31
 8001ca8:	d528      	bpl.n	8001cfc <__sflush_r+0xb8>
 8001caa:	2200      	movs	r2, #0
 8001cac:	6062      	str	r2, [r4, #4]
 8001cae:	04d9      	lsls	r1, r3, #19
 8001cb0:	6922      	ldr	r2, [r4, #16]
 8001cb2:	6022      	str	r2, [r4, #0]
 8001cb4:	d504      	bpl.n	8001cc0 <__sflush_r+0x7c>
 8001cb6:	1c42      	adds	r2, r0, #1
 8001cb8:	d101      	bne.n	8001cbe <__sflush_r+0x7a>
 8001cba:	682b      	ldr	r3, [r5, #0]
 8001cbc:	b903      	cbnz	r3, 8001cc0 <__sflush_r+0x7c>
 8001cbe:	6560      	str	r0, [r4, #84]	; 0x54
 8001cc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001cc2:	602f      	str	r7, [r5, #0]
 8001cc4:	2900      	cmp	r1, #0
 8001cc6:	d0ca      	beq.n	8001c5e <__sflush_r+0x1a>
 8001cc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ccc:	4299      	cmp	r1, r3
 8001cce:	d002      	beq.n	8001cd6 <__sflush_r+0x92>
 8001cd0:	4628      	mov	r0, r5
 8001cd2:	f000 f9df 	bl	8002094 <_free_r>
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	6360      	str	r0, [r4, #52]	; 0x34
 8001cda:	e7c1      	b.n	8001c60 <__sflush_r+0x1c>
 8001cdc:	6a21      	ldr	r1, [r4, #32]
 8001cde:	2301      	movs	r3, #1
 8001ce0:	4628      	mov	r0, r5
 8001ce2:	47b0      	blx	r6
 8001ce4:	1c41      	adds	r1, r0, #1
 8001ce6:	d1c7      	bne.n	8001c78 <__sflush_r+0x34>
 8001ce8:	682b      	ldr	r3, [r5, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0c4      	beq.n	8001c78 <__sflush_r+0x34>
 8001cee:	2b1d      	cmp	r3, #29
 8001cf0:	d001      	beq.n	8001cf6 <__sflush_r+0xb2>
 8001cf2:	2b16      	cmp	r3, #22
 8001cf4:	d101      	bne.n	8001cfa <__sflush_r+0xb6>
 8001cf6:	602f      	str	r7, [r5, #0]
 8001cf8:	e7b1      	b.n	8001c5e <__sflush_r+0x1a>
 8001cfa:	89a3      	ldrh	r3, [r4, #12]
 8001cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d00:	81a3      	strh	r3, [r4, #12]
 8001d02:	e7ad      	b.n	8001c60 <__sflush_r+0x1c>
 8001d04:	690f      	ldr	r7, [r1, #16]
 8001d06:	2f00      	cmp	r7, #0
 8001d08:	d0a9      	beq.n	8001c5e <__sflush_r+0x1a>
 8001d0a:	0793      	lsls	r3, r2, #30
 8001d0c:	680e      	ldr	r6, [r1, #0]
 8001d0e:	bf08      	it	eq
 8001d10:	694b      	ldreq	r3, [r1, #20]
 8001d12:	600f      	str	r7, [r1, #0]
 8001d14:	bf18      	it	ne
 8001d16:	2300      	movne	r3, #0
 8001d18:	eba6 0807 	sub.w	r8, r6, r7
 8001d1c:	608b      	str	r3, [r1, #8]
 8001d1e:	f1b8 0f00 	cmp.w	r8, #0
 8001d22:	dd9c      	ble.n	8001c5e <__sflush_r+0x1a>
 8001d24:	6a21      	ldr	r1, [r4, #32]
 8001d26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001d28:	4643      	mov	r3, r8
 8001d2a:	463a      	mov	r2, r7
 8001d2c:	4628      	mov	r0, r5
 8001d2e:	47b0      	blx	r6
 8001d30:	2800      	cmp	r0, #0
 8001d32:	dc06      	bgt.n	8001d42 <__sflush_r+0xfe>
 8001d34:	89a3      	ldrh	r3, [r4, #12]
 8001d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d3a:	81a3      	strh	r3, [r4, #12]
 8001d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d40:	e78e      	b.n	8001c60 <__sflush_r+0x1c>
 8001d42:	4407      	add	r7, r0
 8001d44:	eba8 0800 	sub.w	r8, r8, r0
 8001d48:	e7e9      	b.n	8001d1e <__sflush_r+0xda>
 8001d4a:	bf00      	nop
 8001d4c:	20400001 	.word	0x20400001

08001d50 <_fflush_r>:
 8001d50:	b538      	push	{r3, r4, r5, lr}
 8001d52:	690b      	ldr	r3, [r1, #16]
 8001d54:	4605      	mov	r5, r0
 8001d56:	460c      	mov	r4, r1
 8001d58:	b913      	cbnz	r3, 8001d60 <_fflush_r+0x10>
 8001d5a:	2500      	movs	r5, #0
 8001d5c:	4628      	mov	r0, r5
 8001d5e:	bd38      	pop	{r3, r4, r5, pc}
 8001d60:	b118      	cbz	r0, 8001d6a <_fflush_r+0x1a>
 8001d62:	6983      	ldr	r3, [r0, #24]
 8001d64:	b90b      	cbnz	r3, 8001d6a <_fflush_r+0x1a>
 8001d66:	f000 f899 	bl	8001e9c <__sinit>
 8001d6a:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <_fflush_r+0x6c>)
 8001d6c:	429c      	cmp	r4, r3
 8001d6e:	d11b      	bne.n	8001da8 <_fflush_r+0x58>
 8001d70:	686c      	ldr	r4, [r5, #4]
 8001d72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0ef      	beq.n	8001d5a <_fflush_r+0xa>
 8001d7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001d7c:	07d0      	lsls	r0, r2, #31
 8001d7e:	d404      	bmi.n	8001d8a <_fflush_r+0x3a>
 8001d80:	0599      	lsls	r1, r3, #22
 8001d82:	d402      	bmi.n	8001d8a <_fflush_r+0x3a>
 8001d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d86:	f000 f97a 	bl	800207e <__retarget_lock_acquire_recursive>
 8001d8a:	4628      	mov	r0, r5
 8001d8c:	4621      	mov	r1, r4
 8001d8e:	f7ff ff59 	bl	8001c44 <__sflush_r>
 8001d92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d94:	07da      	lsls	r2, r3, #31
 8001d96:	4605      	mov	r5, r0
 8001d98:	d4e0      	bmi.n	8001d5c <_fflush_r+0xc>
 8001d9a:	89a3      	ldrh	r3, [r4, #12]
 8001d9c:	059b      	lsls	r3, r3, #22
 8001d9e:	d4dd      	bmi.n	8001d5c <_fflush_r+0xc>
 8001da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001da2:	f000 f96d 	bl	8002080 <__retarget_lock_release_recursive>
 8001da6:	e7d9      	b.n	8001d5c <_fflush_r+0xc>
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <_fflush_r+0x70>)
 8001daa:	429c      	cmp	r4, r3
 8001dac:	d101      	bne.n	8001db2 <_fflush_r+0x62>
 8001dae:	68ac      	ldr	r4, [r5, #8]
 8001db0:	e7df      	b.n	8001d72 <_fflush_r+0x22>
 8001db2:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <_fflush_r+0x74>)
 8001db4:	429c      	cmp	r4, r3
 8001db6:	bf08      	it	eq
 8001db8:	68ec      	ldreq	r4, [r5, #12]
 8001dba:	e7da      	b.n	8001d72 <_fflush_r+0x22>
 8001dbc:	080032cc 	.word	0x080032cc
 8001dc0:	080032ec 	.word	0x080032ec
 8001dc4:	080032ac 	.word	0x080032ac

08001dc8 <fflush>:
 8001dc8:	4601      	mov	r1, r0
 8001dca:	b920      	cbnz	r0, 8001dd6 <fflush+0xe>
 8001dcc:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <fflush+0x18>)
 8001dce:	4905      	ldr	r1, [pc, #20]	; (8001de4 <fflush+0x1c>)
 8001dd0:	6818      	ldr	r0, [r3, #0]
 8001dd2:	f000 b8fe 	b.w	8001fd2 <_fwalk_reent>
 8001dd6:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <fflush+0x20>)
 8001dd8:	6818      	ldr	r0, [r3, #0]
 8001dda:	f7ff bfb9 	b.w	8001d50 <_fflush_r>
 8001dde:	bf00      	nop
 8001de0:	0800330c 	.word	0x0800330c
 8001de4:	08001d51 	.word	0x08001d51
 8001de8:	2000000c 	.word	0x2000000c

08001dec <std>:
 8001dec:	2300      	movs	r3, #0
 8001dee:	b510      	push	{r4, lr}
 8001df0:	4604      	mov	r4, r0
 8001df2:	e9c0 3300 	strd	r3, r3, [r0]
 8001df6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001dfa:	6083      	str	r3, [r0, #8]
 8001dfc:	8181      	strh	r1, [r0, #12]
 8001dfe:	6643      	str	r3, [r0, #100]	; 0x64
 8001e00:	81c2      	strh	r2, [r0, #14]
 8001e02:	6183      	str	r3, [r0, #24]
 8001e04:	4619      	mov	r1, r3
 8001e06:	2208      	movs	r2, #8
 8001e08:	305c      	adds	r0, #92	; 0x5c
 8001e0a:	f000 f93a 	bl	8002082 <memset>
 8001e0e:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <std+0x38>)
 8001e10:	6263      	str	r3, [r4, #36]	; 0x24
 8001e12:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <std+0x3c>)
 8001e14:	62a3      	str	r3, [r4, #40]	; 0x28
 8001e16:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <std+0x40>)
 8001e18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001e1a:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <std+0x44>)
 8001e1c:	6224      	str	r4, [r4, #32]
 8001e1e:	6323      	str	r3, [r4, #48]	; 0x30
 8001e20:	bd10      	pop	{r4, pc}
 8001e22:	bf00      	nop
 8001e24:	08002351 	.word	0x08002351
 8001e28:	08002373 	.word	0x08002373
 8001e2c:	080023ab 	.word	0x080023ab
 8001e30:	080023cf 	.word	0x080023cf

08001e34 <_cleanup_r>:
 8001e34:	4901      	ldr	r1, [pc, #4]	; (8001e3c <_cleanup_r+0x8>)
 8001e36:	f000 b8cc 	b.w	8001fd2 <_fwalk_reent>
 8001e3a:	bf00      	nop
 8001e3c:	08001d51 	.word	0x08001d51

08001e40 <__sfmoreglue>:
 8001e40:	b570      	push	{r4, r5, r6, lr}
 8001e42:	1e4a      	subs	r2, r1, #1
 8001e44:	2568      	movs	r5, #104	; 0x68
 8001e46:	4355      	muls	r5, r2
 8001e48:	460e      	mov	r6, r1
 8001e4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001e4e:	f000 f971 	bl	8002134 <_malloc_r>
 8001e52:	4604      	mov	r4, r0
 8001e54:	b140      	cbz	r0, 8001e68 <__sfmoreglue+0x28>
 8001e56:	2100      	movs	r1, #0
 8001e58:	e9c0 1600 	strd	r1, r6, [r0]
 8001e5c:	300c      	adds	r0, #12
 8001e5e:	60a0      	str	r0, [r4, #8]
 8001e60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001e64:	f000 f90d 	bl	8002082 <memset>
 8001e68:	4620      	mov	r0, r4
 8001e6a:	bd70      	pop	{r4, r5, r6, pc}

08001e6c <__sfp_lock_acquire>:
 8001e6c:	4801      	ldr	r0, [pc, #4]	; (8001e74 <__sfp_lock_acquire+0x8>)
 8001e6e:	f000 b906 	b.w	800207e <__retarget_lock_acquire_recursive>
 8001e72:	bf00      	nop
 8001e74:	200001a4 	.word	0x200001a4

08001e78 <__sfp_lock_release>:
 8001e78:	4801      	ldr	r0, [pc, #4]	; (8001e80 <__sfp_lock_release+0x8>)
 8001e7a:	f000 b901 	b.w	8002080 <__retarget_lock_release_recursive>
 8001e7e:	bf00      	nop
 8001e80:	200001a4 	.word	0x200001a4

08001e84 <__sinit_lock_acquire>:
 8001e84:	4801      	ldr	r0, [pc, #4]	; (8001e8c <__sinit_lock_acquire+0x8>)
 8001e86:	f000 b8fa 	b.w	800207e <__retarget_lock_acquire_recursive>
 8001e8a:	bf00      	nop
 8001e8c:	2000019f 	.word	0x2000019f

08001e90 <__sinit_lock_release>:
 8001e90:	4801      	ldr	r0, [pc, #4]	; (8001e98 <__sinit_lock_release+0x8>)
 8001e92:	f000 b8f5 	b.w	8002080 <__retarget_lock_release_recursive>
 8001e96:	bf00      	nop
 8001e98:	2000019f 	.word	0x2000019f

08001e9c <__sinit>:
 8001e9c:	b510      	push	{r4, lr}
 8001e9e:	4604      	mov	r4, r0
 8001ea0:	f7ff fff0 	bl	8001e84 <__sinit_lock_acquire>
 8001ea4:	69a3      	ldr	r3, [r4, #24]
 8001ea6:	b11b      	cbz	r3, 8001eb0 <__sinit+0x14>
 8001ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001eac:	f7ff bff0 	b.w	8001e90 <__sinit_lock_release>
 8001eb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001eb4:	6523      	str	r3, [r4, #80]	; 0x50
 8001eb6:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <__sinit+0x68>)
 8001eb8:	4a13      	ldr	r2, [pc, #76]	; (8001f08 <__sinit+0x6c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	62a2      	str	r2, [r4, #40]	; 0x28
 8001ebe:	42a3      	cmp	r3, r4
 8001ec0:	bf04      	itt	eq
 8001ec2:	2301      	moveq	r3, #1
 8001ec4:	61a3      	streq	r3, [r4, #24]
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	f000 f820 	bl	8001f0c <__sfp>
 8001ecc:	6060      	str	r0, [r4, #4]
 8001ece:	4620      	mov	r0, r4
 8001ed0:	f000 f81c 	bl	8001f0c <__sfp>
 8001ed4:	60a0      	str	r0, [r4, #8]
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	f000 f818 	bl	8001f0c <__sfp>
 8001edc:	2200      	movs	r2, #0
 8001ede:	60e0      	str	r0, [r4, #12]
 8001ee0:	2104      	movs	r1, #4
 8001ee2:	6860      	ldr	r0, [r4, #4]
 8001ee4:	f7ff ff82 	bl	8001dec <std>
 8001ee8:	68a0      	ldr	r0, [r4, #8]
 8001eea:	2201      	movs	r2, #1
 8001eec:	2109      	movs	r1, #9
 8001eee:	f7ff ff7d 	bl	8001dec <std>
 8001ef2:	68e0      	ldr	r0, [r4, #12]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	2112      	movs	r1, #18
 8001ef8:	f7ff ff78 	bl	8001dec <std>
 8001efc:	2301      	movs	r3, #1
 8001efe:	61a3      	str	r3, [r4, #24]
 8001f00:	e7d2      	b.n	8001ea8 <__sinit+0xc>
 8001f02:	bf00      	nop
 8001f04:	0800330c 	.word	0x0800330c
 8001f08:	08001e35 	.word	0x08001e35

08001f0c <__sfp>:
 8001f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f0e:	4607      	mov	r7, r0
 8001f10:	f7ff ffac 	bl	8001e6c <__sfp_lock_acquire>
 8001f14:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <__sfp+0x84>)
 8001f16:	681e      	ldr	r6, [r3, #0]
 8001f18:	69b3      	ldr	r3, [r6, #24]
 8001f1a:	b913      	cbnz	r3, 8001f22 <__sfp+0x16>
 8001f1c:	4630      	mov	r0, r6
 8001f1e:	f7ff ffbd 	bl	8001e9c <__sinit>
 8001f22:	3648      	adds	r6, #72	; 0x48
 8001f24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	d503      	bpl.n	8001f34 <__sfp+0x28>
 8001f2c:	6833      	ldr	r3, [r6, #0]
 8001f2e:	b30b      	cbz	r3, 8001f74 <__sfp+0x68>
 8001f30:	6836      	ldr	r6, [r6, #0]
 8001f32:	e7f7      	b.n	8001f24 <__sfp+0x18>
 8001f34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001f38:	b9d5      	cbnz	r5, 8001f70 <__sfp+0x64>
 8001f3a:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <__sfp+0x88>)
 8001f3c:	60e3      	str	r3, [r4, #12]
 8001f3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001f42:	6665      	str	r5, [r4, #100]	; 0x64
 8001f44:	f000 f89a 	bl	800207c <__retarget_lock_init_recursive>
 8001f48:	f7ff ff96 	bl	8001e78 <__sfp_lock_release>
 8001f4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001f50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001f54:	6025      	str	r5, [r4, #0]
 8001f56:	61a5      	str	r5, [r4, #24]
 8001f58:	2208      	movs	r2, #8
 8001f5a:	4629      	mov	r1, r5
 8001f5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001f60:	f000 f88f 	bl	8002082 <memset>
 8001f64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001f68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f70:	3468      	adds	r4, #104	; 0x68
 8001f72:	e7d9      	b.n	8001f28 <__sfp+0x1c>
 8001f74:	2104      	movs	r1, #4
 8001f76:	4638      	mov	r0, r7
 8001f78:	f7ff ff62 	bl	8001e40 <__sfmoreglue>
 8001f7c:	4604      	mov	r4, r0
 8001f7e:	6030      	str	r0, [r6, #0]
 8001f80:	2800      	cmp	r0, #0
 8001f82:	d1d5      	bne.n	8001f30 <__sfp+0x24>
 8001f84:	f7ff ff78 	bl	8001e78 <__sfp_lock_release>
 8001f88:	230c      	movs	r3, #12
 8001f8a:	603b      	str	r3, [r7, #0]
 8001f8c:	e7ee      	b.n	8001f6c <__sfp+0x60>
 8001f8e:	bf00      	nop
 8001f90:	0800330c 	.word	0x0800330c
 8001f94:	ffff0001 	.word	0xffff0001

08001f98 <_fwalk>:
 8001f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f9c:	460f      	mov	r7, r1
 8001f9e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001fa2:	2600      	movs	r6, #0
 8001fa4:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8001fa8:	f1b8 0801 	subs.w	r8, r8, #1
 8001fac:	d505      	bpl.n	8001fba <_fwalk+0x22>
 8001fae:	6824      	ldr	r4, [r4, #0]
 8001fb0:	2c00      	cmp	r4, #0
 8001fb2:	d1f7      	bne.n	8001fa4 <_fwalk+0xc>
 8001fb4:	4630      	mov	r0, r6
 8001fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fba:	89ab      	ldrh	r3, [r5, #12]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d906      	bls.n	8001fce <_fwalk+0x36>
 8001fc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	d002      	beq.n	8001fce <_fwalk+0x36>
 8001fc8:	4628      	mov	r0, r5
 8001fca:	47b8      	blx	r7
 8001fcc:	4306      	orrs	r6, r0
 8001fce:	3568      	adds	r5, #104	; 0x68
 8001fd0:	e7ea      	b.n	8001fa8 <_fwalk+0x10>

08001fd2 <_fwalk_reent>:
 8001fd2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fd6:	4606      	mov	r6, r0
 8001fd8:	4688      	mov	r8, r1
 8001fda:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001fde:	2700      	movs	r7, #0
 8001fe0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001fe4:	f1b9 0901 	subs.w	r9, r9, #1
 8001fe8:	d505      	bpl.n	8001ff6 <_fwalk_reent+0x24>
 8001fea:	6824      	ldr	r4, [r4, #0]
 8001fec:	2c00      	cmp	r4, #0
 8001fee:	d1f7      	bne.n	8001fe0 <_fwalk_reent+0xe>
 8001ff0:	4638      	mov	r0, r7
 8001ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ff6:	89ab      	ldrh	r3, [r5, #12]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d907      	bls.n	800200c <_fwalk_reent+0x3a>
 8001ffc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002000:	3301      	adds	r3, #1
 8002002:	d003      	beq.n	800200c <_fwalk_reent+0x3a>
 8002004:	4629      	mov	r1, r5
 8002006:	4630      	mov	r0, r6
 8002008:	47c0      	blx	r8
 800200a:	4307      	orrs	r7, r0
 800200c:	3568      	adds	r5, #104	; 0x68
 800200e:	e7e9      	b.n	8001fe4 <_fwalk_reent+0x12>

08002010 <getchar>:
 8002010:	4b07      	ldr	r3, [pc, #28]	; (8002030 <getchar+0x20>)
 8002012:	b510      	push	{r4, lr}
 8002014:	681c      	ldr	r4, [r3, #0]
 8002016:	b124      	cbz	r4, 8002022 <getchar+0x12>
 8002018:	69a3      	ldr	r3, [r4, #24]
 800201a:	b913      	cbnz	r3, 8002022 <getchar+0x12>
 800201c:	4620      	mov	r0, r4
 800201e:	f7ff ff3d 	bl	8001e9c <__sinit>
 8002022:	6861      	ldr	r1, [r4, #4]
 8002024:	4620      	mov	r0, r4
 8002026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800202a:	f000 bab7 	b.w	800259c <_getc_r>
 800202e:	bf00      	nop
 8002030:	2000000c 	.word	0x2000000c

08002034 <__libc_init_array>:
 8002034:	b570      	push	{r4, r5, r6, lr}
 8002036:	4d0d      	ldr	r5, [pc, #52]	; (800206c <__libc_init_array+0x38>)
 8002038:	4c0d      	ldr	r4, [pc, #52]	; (8002070 <__libc_init_array+0x3c>)
 800203a:	1b64      	subs	r4, r4, r5
 800203c:	10a4      	asrs	r4, r4, #2
 800203e:	2600      	movs	r6, #0
 8002040:	42a6      	cmp	r6, r4
 8002042:	d109      	bne.n	8002058 <__libc_init_array+0x24>
 8002044:	4d0b      	ldr	r5, [pc, #44]	; (8002074 <__libc_init_array+0x40>)
 8002046:	4c0c      	ldr	r4, [pc, #48]	; (8002078 <__libc_init_array+0x44>)
 8002048:	f000 ffc2 	bl	8002fd0 <_init>
 800204c:	1b64      	subs	r4, r4, r5
 800204e:	10a4      	asrs	r4, r4, #2
 8002050:	2600      	movs	r6, #0
 8002052:	42a6      	cmp	r6, r4
 8002054:	d105      	bne.n	8002062 <__libc_init_array+0x2e>
 8002056:	bd70      	pop	{r4, r5, r6, pc}
 8002058:	f855 3b04 	ldr.w	r3, [r5], #4
 800205c:	4798      	blx	r3
 800205e:	3601      	adds	r6, #1
 8002060:	e7ee      	b.n	8002040 <__libc_init_array+0xc>
 8002062:	f855 3b04 	ldr.w	r3, [r5], #4
 8002066:	4798      	blx	r3
 8002068:	3601      	adds	r6, #1
 800206a:	e7f2      	b.n	8002052 <__libc_init_array+0x1e>
 800206c:	0800334c 	.word	0x0800334c
 8002070:	0800334c 	.word	0x0800334c
 8002074:	0800334c 	.word	0x0800334c
 8002078:	08003350 	.word	0x08003350

0800207c <__retarget_lock_init_recursive>:
 800207c:	4770      	bx	lr

0800207e <__retarget_lock_acquire_recursive>:
 800207e:	4770      	bx	lr

08002080 <__retarget_lock_release_recursive>:
 8002080:	4770      	bx	lr

08002082 <memset>:
 8002082:	4402      	add	r2, r0
 8002084:	4603      	mov	r3, r0
 8002086:	4293      	cmp	r3, r2
 8002088:	d100      	bne.n	800208c <memset+0xa>
 800208a:	4770      	bx	lr
 800208c:	f803 1b01 	strb.w	r1, [r3], #1
 8002090:	e7f9      	b.n	8002086 <memset+0x4>
	...

08002094 <_free_r>:
 8002094:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002096:	2900      	cmp	r1, #0
 8002098:	d048      	beq.n	800212c <_free_r+0x98>
 800209a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800209e:	9001      	str	r0, [sp, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f1a1 0404 	sub.w	r4, r1, #4
 80020a6:	bfb8      	it	lt
 80020a8:	18e4      	addlt	r4, r4, r3
 80020aa:	f000 fb2d 	bl	8002708 <__malloc_lock>
 80020ae:	4a20      	ldr	r2, [pc, #128]	; (8002130 <_free_r+0x9c>)
 80020b0:	9801      	ldr	r0, [sp, #4]
 80020b2:	6813      	ldr	r3, [r2, #0]
 80020b4:	4615      	mov	r5, r2
 80020b6:	b933      	cbnz	r3, 80020c6 <_free_r+0x32>
 80020b8:	6063      	str	r3, [r4, #4]
 80020ba:	6014      	str	r4, [r2, #0]
 80020bc:	b003      	add	sp, #12
 80020be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80020c2:	f000 bb27 	b.w	8002714 <__malloc_unlock>
 80020c6:	42a3      	cmp	r3, r4
 80020c8:	d90b      	bls.n	80020e2 <_free_r+0x4e>
 80020ca:	6821      	ldr	r1, [r4, #0]
 80020cc:	1862      	adds	r2, r4, r1
 80020ce:	4293      	cmp	r3, r2
 80020d0:	bf04      	itt	eq
 80020d2:	681a      	ldreq	r2, [r3, #0]
 80020d4:	685b      	ldreq	r3, [r3, #4]
 80020d6:	6063      	str	r3, [r4, #4]
 80020d8:	bf04      	itt	eq
 80020da:	1852      	addeq	r2, r2, r1
 80020dc:	6022      	streq	r2, [r4, #0]
 80020de:	602c      	str	r4, [r5, #0]
 80020e0:	e7ec      	b.n	80020bc <_free_r+0x28>
 80020e2:	461a      	mov	r2, r3
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	b10b      	cbz	r3, 80020ec <_free_r+0x58>
 80020e8:	42a3      	cmp	r3, r4
 80020ea:	d9fa      	bls.n	80020e2 <_free_r+0x4e>
 80020ec:	6811      	ldr	r1, [r2, #0]
 80020ee:	1855      	adds	r5, r2, r1
 80020f0:	42a5      	cmp	r5, r4
 80020f2:	d10b      	bne.n	800210c <_free_r+0x78>
 80020f4:	6824      	ldr	r4, [r4, #0]
 80020f6:	4421      	add	r1, r4
 80020f8:	1854      	adds	r4, r2, r1
 80020fa:	42a3      	cmp	r3, r4
 80020fc:	6011      	str	r1, [r2, #0]
 80020fe:	d1dd      	bne.n	80020bc <_free_r+0x28>
 8002100:	681c      	ldr	r4, [r3, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	6053      	str	r3, [r2, #4]
 8002106:	4421      	add	r1, r4
 8002108:	6011      	str	r1, [r2, #0]
 800210a:	e7d7      	b.n	80020bc <_free_r+0x28>
 800210c:	d902      	bls.n	8002114 <_free_r+0x80>
 800210e:	230c      	movs	r3, #12
 8002110:	6003      	str	r3, [r0, #0]
 8002112:	e7d3      	b.n	80020bc <_free_r+0x28>
 8002114:	6825      	ldr	r5, [r4, #0]
 8002116:	1961      	adds	r1, r4, r5
 8002118:	428b      	cmp	r3, r1
 800211a:	bf04      	itt	eq
 800211c:	6819      	ldreq	r1, [r3, #0]
 800211e:	685b      	ldreq	r3, [r3, #4]
 8002120:	6063      	str	r3, [r4, #4]
 8002122:	bf04      	itt	eq
 8002124:	1949      	addeq	r1, r1, r5
 8002126:	6021      	streq	r1, [r4, #0]
 8002128:	6054      	str	r4, [r2, #4]
 800212a:	e7c7      	b.n	80020bc <_free_r+0x28>
 800212c:	b003      	add	sp, #12
 800212e:	bd30      	pop	{r4, r5, pc}
 8002130:	2000008c 	.word	0x2000008c

08002134 <_malloc_r>:
 8002134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002136:	1ccd      	adds	r5, r1, #3
 8002138:	f025 0503 	bic.w	r5, r5, #3
 800213c:	3508      	adds	r5, #8
 800213e:	2d0c      	cmp	r5, #12
 8002140:	bf38      	it	cc
 8002142:	250c      	movcc	r5, #12
 8002144:	2d00      	cmp	r5, #0
 8002146:	4606      	mov	r6, r0
 8002148:	db01      	blt.n	800214e <_malloc_r+0x1a>
 800214a:	42a9      	cmp	r1, r5
 800214c:	d903      	bls.n	8002156 <_malloc_r+0x22>
 800214e:	230c      	movs	r3, #12
 8002150:	6033      	str	r3, [r6, #0]
 8002152:	2000      	movs	r0, #0
 8002154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002156:	f000 fad7 	bl	8002708 <__malloc_lock>
 800215a:	4921      	ldr	r1, [pc, #132]	; (80021e0 <_malloc_r+0xac>)
 800215c:	680a      	ldr	r2, [r1, #0]
 800215e:	4614      	mov	r4, r2
 8002160:	b99c      	cbnz	r4, 800218a <_malloc_r+0x56>
 8002162:	4f20      	ldr	r7, [pc, #128]	; (80021e4 <_malloc_r+0xb0>)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	b923      	cbnz	r3, 8002172 <_malloc_r+0x3e>
 8002168:	4621      	mov	r1, r4
 800216a:	4630      	mov	r0, r6
 800216c:	f000 f8e0 	bl	8002330 <_sbrk_r>
 8002170:	6038      	str	r0, [r7, #0]
 8002172:	4629      	mov	r1, r5
 8002174:	4630      	mov	r0, r6
 8002176:	f000 f8db 	bl	8002330 <_sbrk_r>
 800217a:	1c43      	adds	r3, r0, #1
 800217c:	d123      	bne.n	80021c6 <_malloc_r+0x92>
 800217e:	230c      	movs	r3, #12
 8002180:	6033      	str	r3, [r6, #0]
 8002182:	4630      	mov	r0, r6
 8002184:	f000 fac6 	bl	8002714 <__malloc_unlock>
 8002188:	e7e3      	b.n	8002152 <_malloc_r+0x1e>
 800218a:	6823      	ldr	r3, [r4, #0]
 800218c:	1b5b      	subs	r3, r3, r5
 800218e:	d417      	bmi.n	80021c0 <_malloc_r+0x8c>
 8002190:	2b0b      	cmp	r3, #11
 8002192:	d903      	bls.n	800219c <_malloc_r+0x68>
 8002194:	6023      	str	r3, [r4, #0]
 8002196:	441c      	add	r4, r3
 8002198:	6025      	str	r5, [r4, #0]
 800219a:	e004      	b.n	80021a6 <_malloc_r+0x72>
 800219c:	6863      	ldr	r3, [r4, #4]
 800219e:	42a2      	cmp	r2, r4
 80021a0:	bf0c      	ite	eq
 80021a2:	600b      	streq	r3, [r1, #0]
 80021a4:	6053      	strne	r3, [r2, #4]
 80021a6:	4630      	mov	r0, r6
 80021a8:	f000 fab4 	bl	8002714 <__malloc_unlock>
 80021ac:	f104 000b 	add.w	r0, r4, #11
 80021b0:	1d23      	adds	r3, r4, #4
 80021b2:	f020 0007 	bic.w	r0, r0, #7
 80021b6:	1ac2      	subs	r2, r0, r3
 80021b8:	d0cc      	beq.n	8002154 <_malloc_r+0x20>
 80021ba:	1a1b      	subs	r3, r3, r0
 80021bc:	50a3      	str	r3, [r4, r2]
 80021be:	e7c9      	b.n	8002154 <_malloc_r+0x20>
 80021c0:	4622      	mov	r2, r4
 80021c2:	6864      	ldr	r4, [r4, #4]
 80021c4:	e7cc      	b.n	8002160 <_malloc_r+0x2c>
 80021c6:	1cc4      	adds	r4, r0, #3
 80021c8:	f024 0403 	bic.w	r4, r4, #3
 80021cc:	42a0      	cmp	r0, r4
 80021ce:	d0e3      	beq.n	8002198 <_malloc_r+0x64>
 80021d0:	1a21      	subs	r1, r4, r0
 80021d2:	4630      	mov	r0, r6
 80021d4:	f000 f8ac 	bl	8002330 <_sbrk_r>
 80021d8:	3001      	adds	r0, #1
 80021da:	d1dd      	bne.n	8002198 <_malloc_r+0x64>
 80021dc:	e7cf      	b.n	800217e <_malloc_r+0x4a>
 80021de:	bf00      	nop
 80021e0:	2000008c 	.word	0x2000008c
 80021e4:	20000090 	.word	0x20000090

080021e8 <iprintf>:
 80021e8:	b40f      	push	{r0, r1, r2, r3}
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <iprintf+0x2c>)
 80021ec:	b513      	push	{r0, r1, r4, lr}
 80021ee:	681c      	ldr	r4, [r3, #0]
 80021f0:	b124      	cbz	r4, 80021fc <iprintf+0x14>
 80021f2:	69a3      	ldr	r3, [r4, #24]
 80021f4:	b913      	cbnz	r3, 80021fc <iprintf+0x14>
 80021f6:	4620      	mov	r0, r4
 80021f8:	f7ff fe50 	bl	8001e9c <__sinit>
 80021fc:	ab05      	add	r3, sp, #20
 80021fe:	9a04      	ldr	r2, [sp, #16]
 8002200:	68a1      	ldr	r1, [r4, #8]
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	4620      	mov	r0, r4
 8002206:	f000 fab5 	bl	8002774 <_vfiprintf_r>
 800220a:	b002      	add	sp, #8
 800220c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002210:	b004      	add	sp, #16
 8002212:	4770      	bx	lr
 8002214:	2000000c 	.word	0x2000000c

08002218 <putchar>:
 8002218:	4b09      	ldr	r3, [pc, #36]	; (8002240 <putchar+0x28>)
 800221a:	b513      	push	{r0, r1, r4, lr}
 800221c:	681c      	ldr	r4, [r3, #0]
 800221e:	4601      	mov	r1, r0
 8002220:	b134      	cbz	r4, 8002230 <putchar+0x18>
 8002222:	69a3      	ldr	r3, [r4, #24]
 8002224:	b923      	cbnz	r3, 8002230 <putchar+0x18>
 8002226:	9001      	str	r0, [sp, #4]
 8002228:	4620      	mov	r0, r4
 800222a:	f7ff fe37 	bl	8001e9c <__sinit>
 800222e:	9901      	ldr	r1, [sp, #4]
 8002230:	68a2      	ldr	r2, [r4, #8]
 8002232:	4620      	mov	r0, r4
 8002234:	b002      	add	sp, #8
 8002236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800223a:	f000 bd5f 	b.w	8002cfc <_putc_r>
 800223e:	bf00      	nop
 8002240:	2000000c 	.word	0x2000000c

08002244 <_puts_r>:
 8002244:	b570      	push	{r4, r5, r6, lr}
 8002246:	460e      	mov	r6, r1
 8002248:	4605      	mov	r5, r0
 800224a:	b118      	cbz	r0, 8002254 <_puts_r+0x10>
 800224c:	6983      	ldr	r3, [r0, #24]
 800224e:	b90b      	cbnz	r3, 8002254 <_puts_r+0x10>
 8002250:	f7ff fe24 	bl	8001e9c <__sinit>
 8002254:	69ab      	ldr	r3, [r5, #24]
 8002256:	68ac      	ldr	r4, [r5, #8]
 8002258:	b913      	cbnz	r3, 8002260 <_puts_r+0x1c>
 800225a:	4628      	mov	r0, r5
 800225c:	f7ff fe1e 	bl	8001e9c <__sinit>
 8002260:	4b2c      	ldr	r3, [pc, #176]	; (8002314 <_puts_r+0xd0>)
 8002262:	429c      	cmp	r4, r3
 8002264:	d120      	bne.n	80022a8 <_puts_r+0x64>
 8002266:	686c      	ldr	r4, [r5, #4]
 8002268:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800226a:	07db      	lsls	r3, r3, #31
 800226c:	d405      	bmi.n	800227a <_puts_r+0x36>
 800226e:	89a3      	ldrh	r3, [r4, #12]
 8002270:	0598      	lsls	r0, r3, #22
 8002272:	d402      	bmi.n	800227a <_puts_r+0x36>
 8002274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002276:	f7ff ff02 	bl	800207e <__retarget_lock_acquire_recursive>
 800227a:	89a3      	ldrh	r3, [r4, #12]
 800227c:	0719      	lsls	r1, r3, #28
 800227e:	d51d      	bpl.n	80022bc <_puts_r+0x78>
 8002280:	6923      	ldr	r3, [r4, #16]
 8002282:	b1db      	cbz	r3, 80022bc <_puts_r+0x78>
 8002284:	3e01      	subs	r6, #1
 8002286:	68a3      	ldr	r3, [r4, #8]
 8002288:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800228c:	3b01      	subs	r3, #1
 800228e:	60a3      	str	r3, [r4, #8]
 8002290:	bb39      	cbnz	r1, 80022e2 <_puts_r+0x9e>
 8002292:	2b00      	cmp	r3, #0
 8002294:	da38      	bge.n	8002308 <_puts_r+0xc4>
 8002296:	4622      	mov	r2, r4
 8002298:	210a      	movs	r1, #10
 800229a:	4628      	mov	r0, r5
 800229c:	f000 f89c 	bl	80023d8 <__swbuf_r>
 80022a0:	3001      	adds	r0, #1
 80022a2:	d011      	beq.n	80022c8 <_puts_r+0x84>
 80022a4:	250a      	movs	r5, #10
 80022a6:	e011      	b.n	80022cc <_puts_r+0x88>
 80022a8:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <_puts_r+0xd4>)
 80022aa:	429c      	cmp	r4, r3
 80022ac:	d101      	bne.n	80022b2 <_puts_r+0x6e>
 80022ae:	68ac      	ldr	r4, [r5, #8]
 80022b0:	e7da      	b.n	8002268 <_puts_r+0x24>
 80022b2:	4b1a      	ldr	r3, [pc, #104]	; (800231c <_puts_r+0xd8>)
 80022b4:	429c      	cmp	r4, r3
 80022b6:	bf08      	it	eq
 80022b8:	68ec      	ldreq	r4, [r5, #12]
 80022ba:	e7d5      	b.n	8002268 <_puts_r+0x24>
 80022bc:	4621      	mov	r1, r4
 80022be:	4628      	mov	r0, r5
 80022c0:	f000 f8ee 	bl	80024a0 <__swsetup_r>
 80022c4:	2800      	cmp	r0, #0
 80022c6:	d0dd      	beq.n	8002284 <_puts_r+0x40>
 80022c8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80022cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80022ce:	07da      	lsls	r2, r3, #31
 80022d0:	d405      	bmi.n	80022de <_puts_r+0x9a>
 80022d2:	89a3      	ldrh	r3, [r4, #12]
 80022d4:	059b      	lsls	r3, r3, #22
 80022d6:	d402      	bmi.n	80022de <_puts_r+0x9a>
 80022d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022da:	f7ff fed1 	bl	8002080 <__retarget_lock_release_recursive>
 80022de:	4628      	mov	r0, r5
 80022e0:	bd70      	pop	{r4, r5, r6, pc}
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	da04      	bge.n	80022f0 <_puts_r+0xac>
 80022e6:	69a2      	ldr	r2, [r4, #24]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	dc06      	bgt.n	80022fa <_puts_r+0xb6>
 80022ec:	290a      	cmp	r1, #10
 80022ee:	d004      	beq.n	80022fa <_puts_r+0xb6>
 80022f0:	6823      	ldr	r3, [r4, #0]
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	6022      	str	r2, [r4, #0]
 80022f6:	7019      	strb	r1, [r3, #0]
 80022f8:	e7c5      	b.n	8002286 <_puts_r+0x42>
 80022fa:	4622      	mov	r2, r4
 80022fc:	4628      	mov	r0, r5
 80022fe:	f000 f86b 	bl	80023d8 <__swbuf_r>
 8002302:	3001      	adds	r0, #1
 8002304:	d1bf      	bne.n	8002286 <_puts_r+0x42>
 8002306:	e7df      	b.n	80022c8 <_puts_r+0x84>
 8002308:	6823      	ldr	r3, [r4, #0]
 800230a:	250a      	movs	r5, #10
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	6022      	str	r2, [r4, #0]
 8002310:	701d      	strb	r5, [r3, #0]
 8002312:	e7db      	b.n	80022cc <_puts_r+0x88>
 8002314:	080032cc 	.word	0x080032cc
 8002318:	080032ec 	.word	0x080032ec
 800231c:	080032ac 	.word	0x080032ac

08002320 <puts>:
 8002320:	4b02      	ldr	r3, [pc, #8]	; (800232c <puts+0xc>)
 8002322:	4601      	mov	r1, r0
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	f7ff bf8d 	b.w	8002244 <_puts_r>
 800232a:	bf00      	nop
 800232c:	2000000c 	.word	0x2000000c

08002330 <_sbrk_r>:
 8002330:	b538      	push	{r3, r4, r5, lr}
 8002332:	4d06      	ldr	r5, [pc, #24]	; (800234c <_sbrk_r+0x1c>)
 8002334:	2300      	movs	r3, #0
 8002336:	4604      	mov	r4, r0
 8002338:	4608      	mov	r0, r1
 800233a:	602b      	str	r3, [r5, #0]
 800233c:	f000 fe3a 	bl	8002fb4 <_sbrk>
 8002340:	1c43      	adds	r3, r0, #1
 8002342:	d102      	bne.n	800234a <_sbrk_r+0x1a>
 8002344:	682b      	ldr	r3, [r5, #0]
 8002346:	b103      	cbz	r3, 800234a <_sbrk_r+0x1a>
 8002348:	6023      	str	r3, [r4, #0]
 800234a:	bd38      	pop	{r3, r4, r5, pc}
 800234c:	200001a8 	.word	0x200001a8

08002350 <__sread>:
 8002350:	b510      	push	{r4, lr}
 8002352:	460c      	mov	r4, r1
 8002354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002358:	f000 fd18 	bl	8002d8c <_read_r>
 800235c:	2800      	cmp	r0, #0
 800235e:	bfab      	itete	ge
 8002360:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002362:	89a3      	ldrhlt	r3, [r4, #12]
 8002364:	181b      	addge	r3, r3, r0
 8002366:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800236a:	bfac      	ite	ge
 800236c:	6563      	strge	r3, [r4, #84]	; 0x54
 800236e:	81a3      	strhlt	r3, [r4, #12]
 8002370:	bd10      	pop	{r4, pc}

08002372 <__swrite>:
 8002372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002376:	461f      	mov	r7, r3
 8002378:	898b      	ldrh	r3, [r1, #12]
 800237a:	05db      	lsls	r3, r3, #23
 800237c:	4605      	mov	r5, r0
 800237e:	460c      	mov	r4, r1
 8002380:	4616      	mov	r6, r2
 8002382:	d505      	bpl.n	8002390 <__swrite+0x1e>
 8002384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002388:	2302      	movs	r3, #2
 800238a:	2200      	movs	r2, #0
 800238c:	f000 f946 	bl	800261c <_lseek_r>
 8002390:	89a3      	ldrh	r3, [r4, #12]
 8002392:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002396:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800239a:	81a3      	strh	r3, [r4, #12]
 800239c:	4632      	mov	r2, r6
 800239e:	463b      	mov	r3, r7
 80023a0:	4628      	mov	r0, r5
 80023a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80023a6:	f000 b869 	b.w	800247c <_write_r>

080023aa <__sseek>:
 80023aa:	b510      	push	{r4, lr}
 80023ac:	460c      	mov	r4, r1
 80023ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023b2:	f000 f933 	bl	800261c <_lseek_r>
 80023b6:	1c43      	adds	r3, r0, #1
 80023b8:	89a3      	ldrh	r3, [r4, #12]
 80023ba:	bf15      	itete	ne
 80023bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80023be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80023c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80023c6:	81a3      	strheq	r3, [r4, #12]
 80023c8:	bf18      	it	ne
 80023ca:	81a3      	strhne	r3, [r4, #12]
 80023cc:	bd10      	pop	{r4, pc}

080023ce <__sclose>:
 80023ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023d2:	f000 b8d3 	b.w	800257c <_close_r>
	...

080023d8 <__swbuf_r>:
 80023d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023da:	460e      	mov	r6, r1
 80023dc:	4614      	mov	r4, r2
 80023de:	4605      	mov	r5, r0
 80023e0:	b118      	cbz	r0, 80023ea <__swbuf_r+0x12>
 80023e2:	6983      	ldr	r3, [r0, #24]
 80023e4:	b90b      	cbnz	r3, 80023ea <__swbuf_r+0x12>
 80023e6:	f7ff fd59 	bl	8001e9c <__sinit>
 80023ea:	4b21      	ldr	r3, [pc, #132]	; (8002470 <__swbuf_r+0x98>)
 80023ec:	429c      	cmp	r4, r3
 80023ee:	d12b      	bne.n	8002448 <__swbuf_r+0x70>
 80023f0:	686c      	ldr	r4, [r5, #4]
 80023f2:	69a3      	ldr	r3, [r4, #24]
 80023f4:	60a3      	str	r3, [r4, #8]
 80023f6:	89a3      	ldrh	r3, [r4, #12]
 80023f8:	071a      	lsls	r2, r3, #28
 80023fa:	d52f      	bpl.n	800245c <__swbuf_r+0x84>
 80023fc:	6923      	ldr	r3, [r4, #16]
 80023fe:	b36b      	cbz	r3, 800245c <__swbuf_r+0x84>
 8002400:	6923      	ldr	r3, [r4, #16]
 8002402:	6820      	ldr	r0, [r4, #0]
 8002404:	1ac0      	subs	r0, r0, r3
 8002406:	6963      	ldr	r3, [r4, #20]
 8002408:	b2f6      	uxtb	r6, r6
 800240a:	4283      	cmp	r3, r0
 800240c:	4637      	mov	r7, r6
 800240e:	dc04      	bgt.n	800241a <__swbuf_r+0x42>
 8002410:	4621      	mov	r1, r4
 8002412:	4628      	mov	r0, r5
 8002414:	f7ff fc9c 	bl	8001d50 <_fflush_r>
 8002418:	bb30      	cbnz	r0, 8002468 <__swbuf_r+0x90>
 800241a:	68a3      	ldr	r3, [r4, #8]
 800241c:	3b01      	subs	r3, #1
 800241e:	60a3      	str	r3, [r4, #8]
 8002420:	6823      	ldr	r3, [r4, #0]
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	6022      	str	r2, [r4, #0]
 8002426:	701e      	strb	r6, [r3, #0]
 8002428:	6963      	ldr	r3, [r4, #20]
 800242a:	3001      	adds	r0, #1
 800242c:	4283      	cmp	r3, r0
 800242e:	d004      	beq.n	800243a <__swbuf_r+0x62>
 8002430:	89a3      	ldrh	r3, [r4, #12]
 8002432:	07db      	lsls	r3, r3, #31
 8002434:	d506      	bpl.n	8002444 <__swbuf_r+0x6c>
 8002436:	2e0a      	cmp	r6, #10
 8002438:	d104      	bne.n	8002444 <__swbuf_r+0x6c>
 800243a:	4621      	mov	r1, r4
 800243c:	4628      	mov	r0, r5
 800243e:	f7ff fc87 	bl	8001d50 <_fflush_r>
 8002442:	b988      	cbnz	r0, 8002468 <__swbuf_r+0x90>
 8002444:	4638      	mov	r0, r7
 8002446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002448:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <__swbuf_r+0x9c>)
 800244a:	429c      	cmp	r4, r3
 800244c:	d101      	bne.n	8002452 <__swbuf_r+0x7a>
 800244e:	68ac      	ldr	r4, [r5, #8]
 8002450:	e7cf      	b.n	80023f2 <__swbuf_r+0x1a>
 8002452:	4b09      	ldr	r3, [pc, #36]	; (8002478 <__swbuf_r+0xa0>)
 8002454:	429c      	cmp	r4, r3
 8002456:	bf08      	it	eq
 8002458:	68ec      	ldreq	r4, [r5, #12]
 800245a:	e7ca      	b.n	80023f2 <__swbuf_r+0x1a>
 800245c:	4621      	mov	r1, r4
 800245e:	4628      	mov	r0, r5
 8002460:	f000 f81e 	bl	80024a0 <__swsetup_r>
 8002464:	2800      	cmp	r0, #0
 8002466:	d0cb      	beq.n	8002400 <__swbuf_r+0x28>
 8002468:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800246c:	e7ea      	b.n	8002444 <__swbuf_r+0x6c>
 800246e:	bf00      	nop
 8002470:	080032cc 	.word	0x080032cc
 8002474:	080032ec 	.word	0x080032ec
 8002478:	080032ac 	.word	0x080032ac

0800247c <_write_r>:
 800247c:	b538      	push	{r3, r4, r5, lr}
 800247e:	4d07      	ldr	r5, [pc, #28]	; (800249c <_write_r+0x20>)
 8002480:	4604      	mov	r4, r0
 8002482:	4608      	mov	r0, r1
 8002484:	4611      	mov	r1, r2
 8002486:	2200      	movs	r2, #0
 8002488:	602a      	str	r2, [r5, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	f7fe fa36 	bl	80008fc <_write>
 8002490:	1c43      	adds	r3, r0, #1
 8002492:	d102      	bne.n	800249a <_write_r+0x1e>
 8002494:	682b      	ldr	r3, [r5, #0]
 8002496:	b103      	cbz	r3, 800249a <_write_r+0x1e>
 8002498:	6023      	str	r3, [r4, #0]
 800249a:	bd38      	pop	{r3, r4, r5, pc}
 800249c:	200001a8 	.word	0x200001a8

080024a0 <__swsetup_r>:
 80024a0:	4b32      	ldr	r3, [pc, #200]	; (800256c <__swsetup_r+0xcc>)
 80024a2:	b570      	push	{r4, r5, r6, lr}
 80024a4:	681d      	ldr	r5, [r3, #0]
 80024a6:	4606      	mov	r6, r0
 80024a8:	460c      	mov	r4, r1
 80024aa:	b125      	cbz	r5, 80024b6 <__swsetup_r+0x16>
 80024ac:	69ab      	ldr	r3, [r5, #24]
 80024ae:	b913      	cbnz	r3, 80024b6 <__swsetup_r+0x16>
 80024b0:	4628      	mov	r0, r5
 80024b2:	f7ff fcf3 	bl	8001e9c <__sinit>
 80024b6:	4b2e      	ldr	r3, [pc, #184]	; (8002570 <__swsetup_r+0xd0>)
 80024b8:	429c      	cmp	r4, r3
 80024ba:	d10f      	bne.n	80024dc <__swsetup_r+0x3c>
 80024bc:	686c      	ldr	r4, [r5, #4]
 80024be:	89a3      	ldrh	r3, [r4, #12]
 80024c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80024c4:	0719      	lsls	r1, r3, #28
 80024c6:	d42c      	bmi.n	8002522 <__swsetup_r+0x82>
 80024c8:	06dd      	lsls	r5, r3, #27
 80024ca:	d411      	bmi.n	80024f0 <__swsetup_r+0x50>
 80024cc:	2309      	movs	r3, #9
 80024ce:	6033      	str	r3, [r6, #0]
 80024d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80024d4:	81a3      	strh	r3, [r4, #12]
 80024d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024da:	e03e      	b.n	800255a <__swsetup_r+0xba>
 80024dc:	4b25      	ldr	r3, [pc, #148]	; (8002574 <__swsetup_r+0xd4>)
 80024de:	429c      	cmp	r4, r3
 80024e0:	d101      	bne.n	80024e6 <__swsetup_r+0x46>
 80024e2:	68ac      	ldr	r4, [r5, #8]
 80024e4:	e7eb      	b.n	80024be <__swsetup_r+0x1e>
 80024e6:	4b24      	ldr	r3, [pc, #144]	; (8002578 <__swsetup_r+0xd8>)
 80024e8:	429c      	cmp	r4, r3
 80024ea:	bf08      	it	eq
 80024ec:	68ec      	ldreq	r4, [r5, #12]
 80024ee:	e7e6      	b.n	80024be <__swsetup_r+0x1e>
 80024f0:	0758      	lsls	r0, r3, #29
 80024f2:	d512      	bpl.n	800251a <__swsetup_r+0x7a>
 80024f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80024f6:	b141      	cbz	r1, 800250a <__swsetup_r+0x6a>
 80024f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80024fc:	4299      	cmp	r1, r3
 80024fe:	d002      	beq.n	8002506 <__swsetup_r+0x66>
 8002500:	4630      	mov	r0, r6
 8002502:	f7ff fdc7 	bl	8002094 <_free_r>
 8002506:	2300      	movs	r3, #0
 8002508:	6363      	str	r3, [r4, #52]	; 0x34
 800250a:	89a3      	ldrh	r3, [r4, #12]
 800250c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002510:	81a3      	strh	r3, [r4, #12]
 8002512:	2300      	movs	r3, #0
 8002514:	6063      	str	r3, [r4, #4]
 8002516:	6923      	ldr	r3, [r4, #16]
 8002518:	6023      	str	r3, [r4, #0]
 800251a:	89a3      	ldrh	r3, [r4, #12]
 800251c:	f043 0308 	orr.w	r3, r3, #8
 8002520:	81a3      	strh	r3, [r4, #12]
 8002522:	6923      	ldr	r3, [r4, #16]
 8002524:	b94b      	cbnz	r3, 800253a <__swsetup_r+0x9a>
 8002526:	89a3      	ldrh	r3, [r4, #12]
 8002528:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800252c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002530:	d003      	beq.n	800253a <__swsetup_r+0x9a>
 8002532:	4621      	mov	r1, r4
 8002534:	4630      	mov	r0, r6
 8002536:	f000 f8a7 	bl	8002688 <__smakebuf_r>
 800253a:	89a0      	ldrh	r0, [r4, #12]
 800253c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002540:	f010 0301 	ands.w	r3, r0, #1
 8002544:	d00a      	beq.n	800255c <__swsetup_r+0xbc>
 8002546:	2300      	movs	r3, #0
 8002548:	60a3      	str	r3, [r4, #8]
 800254a:	6963      	ldr	r3, [r4, #20]
 800254c:	425b      	negs	r3, r3
 800254e:	61a3      	str	r3, [r4, #24]
 8002550:	6923      	ldr	r3, [r4, #16]
 8002552:	b943      	cbnz	r3, 8002566 <__swsetup_r+0xc6>
 8002554:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002558:	d1ba      	bne.n	80024d0 <__swsetup_r+0x30>
 800255a:	bd70      	pop	{r4, r5, r6, pc}
 800255c:	0781      	lsls	r1, r0, #30
 800255e:	bf58      	it	pl
 8002560:	6963      	ldrpl	r3, [r4, #20]
 8002562:	60a3      	str	r3, [r4, #8]
 8002564:	e7f4      	b.n	8002550 <__swsetup_r+0xb0>
 8002566:	2000      	movs	r0, #0
 8002568:	e7f7      	b.n	800255a <__swsetup_r+0xba>
 800256a:	bf00      	nop
 800256c:	2000000c 	.word	0x2000000c
 8002570:	080032cc 	.word	0x080032cc
 8002574:	080032ec 	.word	0x080032ec
 8002578:	080032ac 	.word	0x080032ac

0800257c <_close_r>:
 800257c:	b538      	push	{r3, r4, r5, lr}
 800257e:	4d06      	ldr	r5, [pc, #24]	; (8002598 <_close_r+0x1c>)
 8002580:	2300      	movs	r3, #0
 8002582:	4604      	mov	r4, r0
 8002584:	4608      	mov	r0, r1
 8002586:	602b      	str	r3, [r5, #0]
 8002588:	f000 fcf4 	bl	8002f74 <_close>
 800258c:	1c43      	adds	r3, r0, #1
 800258e:	d102      	bne.n	8002596 <_close_r+0x1a>
 8002590:	682b      	ldr	r3, [r5, #0]
 8002592:	b103      	cbz	r3, 8002596 <_close_r+0x1a>
 8002594:	6023      	str	r3, [r4, #0]
 8002596:	bd38      	pop	{r3, r4, r5, pc}
 8002598:	200001a8 	.word	0x200001a8

0800259c <_getc_r>:
 800259c:	b538      	push	{r3, r4, r5, lr}
 800259e:	460c      	mov	r4, r1
 80025a0:	4605      	mov	r5, r0
 80025a2:	b118      	cbz	r0, 80025ac <_getc_r+0x10>
 80025a4:	6983      	ldr	r3, [r0, #24]
 80025a6:	b90b      	cbnz	r3, 80025ac <_getc_r+0x10>
 80025a8:	f7ff fc78 	bl	8001e9c <__sinit>
 80025ac:	4b18      	ldr	r3, [pc, #96]	; (8002610 <_getc_r+0x74>)
 80025ae:	429c      	cmp	r4, r3
 80025b0:	d11e      	bne.n	80025f0 <_getc_r+0x54>
 80025b2:	686c      	ldr	r4, [r5, #4]
 80025b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80025b6:	07d8      	lsls	r0, r3, #31
 80025b8:	d405      	bmi.n	80025c6 <_getc_r+0x2a>
 80025ba:	89a3      	ldrh	r3, [r4, #12]
 80025bc:	0599      	lsls	r1, r3, #22
 80025be:	d402      	bmi.n	80025c6 <_getc_r+0x2a>
 80025c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025c2:	f7ff fd5c 	bl	800207e <__retarget_lock_acquire_recursive>
 80025c6:	6863      	ldr	r3, [r4, #4]
 80025c8:	3b01      	subs	r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	6063      	str	r3, [r4, #4]
 80025ce:	da19      	bge.n	8002604 <_getc_r+0x68>
 80025d0:	4628      	mov	r0, r5
 80025d2:	4621      	mov	r1, r4
 80025d4:	f000 fbec 	bl	8002db0 <__srget_r>
 80025d8:	4605      	mov	r5, r0
 80025da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80025dc:	07da      	lsls	r2, r3, #31
 80025de:	d405      	bmi.n	80025ec <_getc_r+0x50>
 80025e0:	89a3      	ldrh	r3, [r4, #12]
 80025e2:	059b      	lsls	r3, r3, #22
 80025e4:	d402      	bmi.n	80025ec <_getc_r+0x50>
 80025e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025e8:	f7ff fd4a 	bl	8002080 <__retarget_lock_release_recursive>
 80025ec:	4628      	mov	r0, r5
 80025ee:	bd38      	pop	{r3, r4, r5, pc}
 80025f0:	4b08      	ldr	r3, [pc, #32]	; (8002614 <_getc_r+0x78>)
 80025f2:	429c      	cmp	r4, r3
 80025f4:	d101      	bne.n	80025fa <_getc_r+0x5e>
 80025f6:	68ac      	ldr	r4, [r5, #8]
 80025f8:	e7dc      	b.n	80025b4 <_getc_r+0x18>
 80025fa:	4b07      	ldr	r3, [pc, #28]	; (8002618 <_getc_r+0x7c>)
 80025fc:	429c      	cmp	r4, r3
 80025fe:	bf08      	it	eq
 8002600:	68ec      	ldreq	r4, [r5, #12]
 8002602:	e7d7      	b.n	80025b4 <_getc_r+0x18>
 8002604:	6823      	ldr	r3, [r4, #0]
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	6022      	str	r2, [r4, #0]
 800260a:	781d      	ldrb	r5, [r3, #0]
 800260c:	e7e5      	b.n	80025da <_getc_r+0x3e>
 800260e:	bf00      	nop
 8002610:	080032cc 	.word	0x080032cc
 8002614:	080032ec 	.word	0x080032ec
 8002618:	080032ac 	.word	0x080032ac

0800261c <_lseek_r>:
 800261c:	b538      	push	{r3, r4, r5, lr}
 800261e:	4d07      	ldr	r5, [pc, #28]	; (800263c <_lseek_r+0x20>)
 8002620:	4604      	mov	r4, r0
 8002622:	4608      	mov	r0, r1
 8002624:	4611      	mov	r1, r2
 8002626:	2200      	movs	r2, #0
 8002628:	602a      	str	r2, [r5, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	f000 fcba 	bl	8002fa4 <_lseek>
 8002630:	1c43      	adds	r3, r0, #1
 8002632:	d102      	bne.n	800263a <_lseek_r+0x1e>
 8002634:	682b      	ldr	r3, [r5, #0]
 8002636:	b103      	cbz	r3, 800263a <_lseek_r+0x1e>
 8002638:	6023      	str	r3, [r4, #0]
 800263a:	bd38      	pop	{r3, r4, r5, pc}
 800263c:	200001a8 	.word	0x200001a8

08002640 <__swhatbuf_r>:
 8002640:	b570      	push	{r4, r5, r6, lr}
 8002642:	460e      	mov	r6, r1
 8002644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002648:	2900      	cmp	r1, #0
 800264a:	b096      	sub	sp, #88	; 0x58
 800264c:	4614      	mov	r4, r2
 800264e:	461d      	mov	r5, r3
 8002650:	da07      	bge.n	8002662 <__swhatbuf_r+0x22>
 8002652:	2300      	movs	r3, #0
 8002654:	602b      	str	r3, [r5, #0]
 8002656:	89b3      	ldrh	r3, [r6, #12]
 8002658:	061a      	lsls	r2, r3, #24
 800265a:	d410      	bmi.n	800267e <__swhatbuf_r+0x3e>
 800265c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002660:	e00e      	b.n	8002680 <__swhatbuf_r+0x40>
 8002662:	466a      	mov	r2, sp
 8002664:	f000 fbd0 	bl	8002e08 <_fstat_r>
 8002668:	2800      	cmp	r0, #0
 800266a:	dbf2      	blt.n	8002652 <__swhatbuf_r+0x12>
 800266c:	9a01      	ldr	r2, [sp, #4]
 800266e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002672:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002676:	425a      	negs	r2, r3
 8002678:	415a      	adcs	r2, r3
 800267a:	602a      	str	r2, [r5, #0]
 800267c:	e7ee      	b.n	800265c <__swhatbuf_r+0x1c>
 800267e:	2340      	movs	r3, #64	; 0x40
 8002680:	2000      	movs	r0, #0
 8002682:	6023      	str	r3, [r4, #0]
 8002684:	b016      	add	sp, #88	; 0x58
 8002686:	bd70      	pop	{r4, r5, r6, pc}

08002688 <__smakebuf_r>:
 8002688:	898b      	ldrh	r3, [r1, #12]
 800268a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800268c:	079d      	lsls	r5, r3, #30
 800268e:	4606      	mov	r6, r0
 8002690:	460c      	mov	r4, r1
 8002692:	d507      	bpl.n	80026a4 <__smakebuf_r+0x1c>
 8002694:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002698:	6023      	str	r3, [r4, #0]
 800269a:	6123      	str	r3, [r4, #16]
 800269c:	2301      	movs	r3, #1
 800269e:	6163      	str	r3, [r4, #20]
 80026a0:	b002      	add	sp, #8
 80026a2:	bd70      	pop	{r4, r5, r6, pc}
 80026a4:	ab01      	add	r3, sp, #4
 80026a6:	466a      	mov	r2, sp
 80026a8:	f7ff ffca 	bl	8002640 <__swhatbuf_r>
 80026ac:	9900      	ldr	r1, [sp, #0]
 80026ae:	4605      	mov	r5, r0
 80026b0:	4630      	mov	r0, r6
 80026b2:	f7ff fd3f 	bl	8002134 <_malloc_r>
 80026b6:	b948      	cbnz	r0, 80026cc <__smakebuf_r+0x44>
 80026b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026bc:	059a      	lsls	r2, r3, #22
 80026be:	d4ef      	bmi.n	80026a0 <__smakebuf_r+0x18>
 80026c0:	f023 0303 	bic.w	r3, r3, #3
 80026c4:	f043 0302 	orr.w	r3, r3, #2
 80026c8:	81a3      	strh	r3, [r4, #12]
 80026ca:	e7e3      	b.n	8002694 <__smakebuf_r+0xc>
 80026cc:	4b0d      	ldr	r3, [pc, #52]	; (8002704 <__smakebuf_r+0x7c>)
 80026ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80026d0:	89a3      	ldrh	r3, [r4, #12]
 80026d2:	6020      	str	r0, [r4, #0]
 80026d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d8:	81a3      	strh	r3, [r4, #12]
 80026da:	9b00      	ldr	r3, [sp, #0]
 80026dc:	6163      	str	r3, [r4, #20]
 80026de:	9b01      	ldr	r3, [sp, #4]
 80026e0:	6120      	str	r0, [r4, #16]
 80026e2:	b15b      	cbz	r3, 80026fc <__smakebuf_r+0x74>
 80026e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80026e8:	4630      	mov	r0, r6
 80026ea:	f000 fb9f 	bl	8002e2c <_isatty_r>
 80026ee:	b128      	cbz	r0, 80026fc <__smakebuf_r+0x74>
 80026f0:	89a3      	ldrh	r3, [r4, #12]
 80026f2:	f023 0303 	bic.w	r3, r3, #3
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	81a3      	strh	r3, [r4, #12]
 80026fc:	89a0      	ldrh	r0, [r4, #12]
 80026fe:	4305      	orrs	r5, r0
 8002700:	81a5      	strh	r5, [r4, #12]
 8002702:	e7cd      	b.n	80026a0 <__smakebuf_r+0x18>
 8002704:	08001e35 	.word	0x08001e35

08002708 <__malloc_lock>:
 8002708:	4801      	ldr	r0, [pc, #4]	; (8002710 <__malloc_lock+0x8>)
 800270a:	f7ff bcb8 	b.w	800207e <__retarget_lock_acquire_recursive>
 800270e:	bf00      	nop
 8002710:	200001a0 	.word	0x200001a0

08002714 <__malloc_unlock>:
 8002714:	4801      	ldr	r0, [pc, #4]	; (800271c <__malloc_unlock+0x8>)
 8002716:	f7ff bcb3 	b.w	8002080 <__retarget_lock_release_recursive>
 800271a:	bf00      	nop
 800271c:	200001a0 	.word	0x200001a0

08002720 <__sfputc_r>:
 8002720:	6893      	ldr	r3, [r2, #8]
 8002722:	3b01      	subs	r3, #1
 8002724:	2b00      	cmp	r3, #0
 8002726:	b410      	push	{r4}
 8002728:	6093      	str	r3, [r2, #8]
 800272a:	da08      	bge.n	800273e <__sfputc_r+0x1e>
 800272c:	6994      	ldr	r4, [r2, #24]
 800272e:	42a3      	cmp	r3, r4
 8002730:	db01      	blt.n	8002736 <__sfputc_r+0x16>
 8002732:	290a      	cmp	r1, #10
 8002734:	d103      	bne.n	800273e <__sfputc_r+0x1e>
 8002736:	f85d 4b04 	ldr.w	r4, [sp], #4
 800273a:	f7ff be4d 	b.w	80023d8 <__swbuf_r>
 800273e:	6813      	ldr	r3, [r2, #0]
 8002740:	1c58      	adds	r0, r3, #1
 8002742:	6010      	str	r0, [r2, #0]
 8002744:	7019      	strb	r1, [r3, #0]
 8002746:	4608      	mov	r0, r1
 8002748:	f85d 4b04 	ldr.w	r4, [sp], #4
 800274c:	4770      	bx	lr

0800274e <__sfputs_r>:
 800274e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002750:	4606      	mov	r6, r0
 8002752:	460f      	mov	r7, r1
 8002754:	4614      	mov	r4, r2
 8002756:	18d5      	adds	r5, r2, r3
 8002758:	42ac      	cmp	r4, r5
 800275a:	d101      	bne.n	8002760 <__sfputs_r+0x12>
 800275c:	2000      	movs	r0, #0
 800275e:	e007      	b.n	8002770 <__sfputs_r+0x22>
 8002760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002764:	463a      	mov	r2, r7
 8002766:	4630      	mov	r0, r6
 8002768:	f7ff ffda 	bl	8002720 <__sfputc_r>
 800276c:	1c43      	adds	r3, r0, #1
 800276e:	d1f3      	bne.n	8002758 <__sfputs_r+0xa>
 8002770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002774 <_vfiprintf_r>:
 8002774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002778:	460d      	mov	r5, r1
 800277a:	b09d      	sub	sp, #116	; 0x74
 800277c:	4614      	mov	r4, r2
 800277e:	4698      	mov	r8, r3
 8002780:	4606      	mov	r6, r0
 8002782:	b118      	cbz	r0, 800278c <_vfiprintf_r+0x18>
 8002784:	6983      	ldr	r3, [r0, #24]
 8002786:	b90b      	cbnz	r3, 800278c <_vfiprintf_r+0x18>
 8002788:	f7ff fb88 	bl	8001e9c <__sinit>
 800278c:	4b89      	ldr	r3, [pc, #548]	; (80029b4 <_vfiprintf_r+0x240>)
 800278e:	429d      	cmp	r5, r3
 8002790:	d11b      	bne.n	80027ca <_vfiprintf_r+0x56>
 8002792:	6875      	ldr	r5, [r6, #4]
 8002794:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002796:	07d9      	lsls	r1, r3, #31
 8002798:	d405      	bmi.n	80027a6 <_vfiprintf_r+0x32>
 800279a:	89ab      	ldrh	r3, [r5, #12]
 800279c:	059a      	lsls	r2, r3, #22
 800279e:	d402      	bmi.n	80027a6 <_vfiprintf_r+0x32>
 80027a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027a2:	f7ff fc6c 	bl	800207e <__retarget_lock_acquire_recursive>
 80027a6:	89ab      	ldrh	r3, [r5, #12]
 80027a8:	071b      	lsls	r3, r3, #28
 80027aa:	d501      	bpl.n	80027b0 <_vfiprintf_r+0x3c>
 80027ac:	692b      	ldr	r3, [r5, #16]
 80027ae:	b9eb      	cbnz	r3, 80027ec <_vfiprintf_r+0x78>
 80027b0:	4629      	mov	r1, r5
 80027b2:	4630      	mov	r0, r6
 80027b4:	f7ff fe74 	bl	80024a0 <__swsetup_r>
 80027b8:	b1c0      	cbz	r0, 80027ec <_vfiprintf_r+0x78>
 80027ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027bc:	07dc      	lsls	r4, r3, #31
 80027be:	d50e      	bpl.n	80027de <_vfiprintf_r+0x6a>
 80027c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027c4:	b01d      	add	sp, #116	; 0x74
 80027c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027ca:	4b7b      	ldr	r3, [pc, #492]	; (80029b8 <_vfiprintf_r+0x244>)
 80027cc:	429d      	cmp	r5, r3
 80027ce:	d101      	bne.n	80027d4 <_vfiprintf_r+0x60>
 80027d0:	68b5      	ldr	r5, [r6, #8]
 80027d2:	e7df      	b.n	8002794 <_vfiprintf_r+0x20>
 80027d4:	4b79      	ldr	r3, [pc, #484]	; (80029bc <_vfiprintf_r+0x248>)
 80027d6:	429d      	cmp	r5, r3
 80027d8:	bf08      	it	eq
 80027da:	68f5      	ldreq	r5, [r6, #12]
 80027dc:	e7da      	b.n	8002794 <_vfiprintf_r+0x20>
 80027de:	89ab      	ldrh	r3, [r5, #12]
 80027e0:	0598      	lsls	r0, r3, #22
 80027e2:	d4ed      	bmi.n	80027c0 <_vfiprintf_r+0x4c>
 80027e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027e6:	f7ff fc4b 	bl	8002080 <__retarget_lock_release_recursive>
 80027ea:	e7e9      	b.n	80027c0 <_vfiprintf_r+0x4c>
 80027ec:	2300      	movs	r3, #0
 80027ee:	9309      	str	r3, [sp, #36]	; 0x24
 80027f0:	2320      	movs	r3, #32
 80027f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80027f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80027fa:	2330      	movs	r3, #48	; 0x30
 80027fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80029c0 <_vfiprintf_r+0x24c>
 8002800:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002804:	f04f 0901 	mov.w	r9, #1
 8002808:	4623      	mov	r3, r4
 800280a:	469a      	mov	sl, r3
 800280c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002810:	b10a      	cbz	r2, 8002816 <_vfiprintf_r+0xa2>
 8002812:	2a25      	cmp	r2, #37	; 0x25
 8002814:	d1f9      	bne.n	800280a <_vfiprintf_r+0x96>
 8002816:	ebba 0b04 	subs.w	fp, sl, r4
 800281a:	d00b      	beq.n	8002834 <_vfiprintf_r+0xc0>
 800281c:	465b      	mov	r3, fp
 800281e:	4622      	mov	r2, r4
 8002820:	4629      	mov	r1, r5
 8002822:	4630      	mov	r0, r6
 8002824:	f7ff ff93 	bl	800274e <__sfputs_r>
 8002828:	3001      	adds	r0, #1
 800282a:	f000 80aa 	beq.w	8002982 <_vfiprintf_r+0x20e>
 800282e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002830:	445a      	add	r2, fp
 8002832:	9209      	str	r2, [sp, #36]	; 0x24
 8002834:	f89a 3000 	ldrb.w	r3, [sl]
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 80a2 	beq.w	8002982 <_vfiprintf_r+0x20e>
 800283e:	2300      	movs	r3, #0
 8002840:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002844:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002848:	f10a 0a01 	add.w	sl, sl, #1
 800284c:	9304      	str	r3, [sp, #16]
 800284e:	9307      	str	r3, [sp, #28]
 8002850:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002854:	931a      	str	r3, [sp, #104]	; 0x68
 8002856:	4654      	mov	r4, sl
 8002858:	2205      	movs	r2, #5
 800285a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800285e:	4858      	ldr	r0, [pc, #352]	; (80029c0 <_vfiprintf_r+0x24c>)
 8002860:	f7fd fcee 	bl	8000240 <memchr>
 8002864:	9a04      	ldr	r2, [sp, #16]
 8002866:	b9d8      	cbnz	r0, 80028a0 <_vfiprintf_r+0x12c>
 8002868:	06d1      	lsls	r1, r2, #27
 800286a:	bf44      	itt	mi
 800286c:	2320      	movmi	r3, #32
 800286e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002872:	0713      	lsls	r3, r2, #28
 8002874:	bf44      	itt	mi
 8002876:	232b      	movmi	r3, #43	; 0x2b
 8002878:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800287c:	f89a 3000 	ldrb.w	r3, [sl]
 8002880:	2b2a      	cmp	r3, #42	; 0x2a
 8002882:	d015      	beq.n	80028b0 <_vfiprintf_r+0x13c>
 8002884:	9a07      	ldr	r2, [sp, #28]
 8002886:	4654      	mov	r4, sl
 8002888:	2000      	movs	r0, #0
 800288a:	f04f 0c0a 	mov.w	ip, #10
 800288e:	4621      	mov	r1, r4
 8002890:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002894:	3b30      	subs	r3, #48	; 0x30
 8002896:	2b09      	cmp	r3, #9
 8002898:	d94e      	bls.n	8002938 <_vfiprintf_r+0x1c4>
 800289a:	b1b0      	cbz	r0, 80028ca <_vfiprintf_r+0x156>
 800289c:	9207      	str	r2, [sp, #28]
 800289e:	e014      	b.n	80028ca <_vfiprintf_r+0x156>
 80028a0:	eba0 0308 	sub.w	r3, r0, r8
 80028a4:	fa09 f303 	lsl.w	r3, r9, r3
 80028a8:	4313      	orrs	r3, r2
 80028aa:	9304      	str	r3, [sp, #16]
 80028ac:	46a2      	mov	sl, r4
 80028ae:	e7d2      	b.n	8002856 <_vfiprintf_r+0xe2>
 80028b0:	9b03      	ldr	r3, [sp, #12]
 80028b2:	1d19      	adds	r1, r3, #4
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	9103      	str	r1, [sp, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	bfbb      	ittet	lt
 80028bc:	425b      	neglt	r3, r3
 80028be:	f042 0202 	orrlt.w	r2, r2, #2
 80028c2:	9307      	strge	r3, [sp, #28]
 80028c4:	9307      	strlt	r3, [sp, #28]
 80028c6:	bfb8      	it	lt
 80028c8:	9204      	strlt	r2, [sp, #16]
 80028ca:	7823      	ldrb	r3, [r4, #0]
 80028cc:	2b2e      	cmp	r3, #46	; 0x2e
 80028ce:	d10c      	bne.n	80028ea <_vfiprintf_r+0x176>
 80028d0:	7863      	ldrb	r3, [r4, #1]
 80028d2:	2b2a      	cmp	r3, #42	; 0x2a
 80028d4:	d135      	bne.n	8002942 <_vfiprintf_r+0x1ce>
 80028d6:	9b03      	ldr	r3, [sp, #12]
 80028d8:	1d1a      	adds	r2, r3, #4
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	9203      	str	r2, [sp, #12]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	bfb8      	it	lt
 80028e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80028e6:	3402      	adds	r4, #2
 80028e8:	9305      	str	r3, [sp, #20]
 80028ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80029d0 <_vfiprintf_r+0x25c>
 80028ee:	7821      	ldrb	r1, [r4, #0]
 80028f0:	2203      	movs	r2, #3
 80028f2:	4650      	mov	r0, sl
 80028f4:	f7fd fca4 	bl	8000240 <memchr>
 80028f8:	b140      	cbz	r0, 800290c <_vfiprintf_r+0x198>
 80028fa:	2340      	movs	r3, #64	; 0x40
 80028fc:	eba0 000a 	sub.w	r0, r0, sl
 8002900:	fa03 f000 	lsl.w	r0, r3, r0
 8002904:	9b04      	ldr	r3, [sp, #16]
 8002906:	4303      	orrs	r3, r0
 8002908:	3401      	adds	r4, #1
 800290a:	9304      	str	r3, [sp, #16]
 800290c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002910:	482c      	ldr	r0, [pc, #176]	; (80029c4 <_vfiprintf_r+0x250>)
 8002912:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002916:	2206      	movs	r2, #6
 8002918:	f7fd fc92 	bl	8000240 <memchr>
 800291c:	2800      	cmp	r0, #0
 800291e:	d03f      	beq.n	80029a0 <_vfiprintf_r+0x22c>
 8002920:	4b29      	ldr	r3, [pc, #164]	; (80029c8 <_vfiprintf_r+0x254>)
 8002922:	bb1b      	cbnz	r3, 800296c <_vfiprintf_r+0x1f8>
 8002924:	9b03      	ldr	r3, [sp, #12]
 8002926:	3307      	adds	r3, #7
 8002928:	f023 0307 	bic.w	r3, r3, #7
 800292c:	3308      	adds	r3, #8
 800292e:	9303      	str	r3, [sp, #12]
 8002930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002932:	443b      	add	r3, r7
 8002934:	9309      	str	r3, [sp, #36]	; 0x24
 8002936:	e767      	b.n	8002808 <_vfiprintf_r+0x94>
 8002938:	fb0c 3202 	mla	r2, ip, r2, r3
 800293c:	460c      	mov	r4, r1
 800293e:	2001      	movs	r0, #1
 8002940:	e7a5      	b.n	800288e <_vfiprintf_r+0x11a>
 8002942:	2300      	movs	r3, #0
 8002944:	3401      	adds	r4, #1
 8002946:	9305      	str	r3, [sp, #20]
 8002948:	4619      	mov	r1, r3
 800294a:	f04f 0c0a 	mov.w	ip, #10
 800294e:	4620      	mov	r0, r4
 8002950:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002954:	3a30      	subs	r2, #48	; 0x30
 8002956:	2a09      	cmp	r2, #9
 8002958:	d903      	bls.n	8002962 <_vfiprintf_r+0x1ee>
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0c5      	beq.n	80028ea <_vfiprintf_r+0x176>
 800295e:	9105      	str	r1, [sp, #20]
 8002960:	e7c3      	b.n	80028ea <_vfiprintf_r+0x176>
 8002962:	fb0c 2101 	mla	r1, ip, r1, r2
 8002966:	4604      	mov	r4, r0
 8002968:	2301      	movs	r3, #1
 800296a:	e7f0      	b.n	800294e <_vfiprintf_r+0x1da>
 800296c:	ab03      	add	r3, sp, #12
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	462a      	mov	r2, r5
 8002972:	4b16      	ldr	r3, [pc, #88]	; (80029cc <_vfiprintf_r+0x258>)
 8002974:	a904      	add	r1, sp, #16
 8002976:	4630      	mov	r0, r6
 8002978:	f3af 8000 	nop.w
 800297c:	4607      	mov	r7, r0
 800297e:	1c78      	adds	r0, r7, #1
 8002980:	d1d6      	bne.n	8002930 <_vfiprintf_r+0x1bc>
 8002982:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002984:	07d9      	lsls	r1, r3, #31
 8002986:	d405      	bmi.n	8002994 <_vfiprintf_r+0x220>
 8002988:	89ab      	ldrh	r3, [r5, #12]
 800298a:	059a      	lsls	r2, r3, #22
 800298c:	d402      	bmi.n	8002994 <_vfiprintf_r+0x220>
 800298e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002990:	f7ff fb76 	bl	8002080 <__retarget_lock_release_recursive>
 8002994:	89ab      	ldrh	r3, [r5, #12]
 8002996:	065b      	lsls	r3, r3, #25
 8002998:	f53f af12 	bmi.w	80027c0 <_vfiprintf_r+0x4c>
 800299c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800299e:	e711      	b.n	80027c4 <_vfiprintf_r+0x50>
 80029a0:	ab03      	add	r3, sp, #12
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	462a      	mov	r2, r5
 80029a6:	4b09      	ldr	r3, [pc, #36]	; (80029cc <_vfiprintf_r+0x258>)
 80029a8:	a904      	add	r1, sp, #16
 80029aa:	4630      	mov	r0, r6
 80029ac:	f000 f880 	bl	8002ab0 <_printf_i>
 80029b0:	e7e4      	b.n	800297c <_vfiprintf_r+0x208>
 80029b2:	bf00      	nop
 80029b4:	080032cc 	.word	0x080032cc
 80029b8:	080032ec 	.word	0x080032ec
 80029bc:	080032ac 	.word	0x080032ac
 80029c0:	08003310 	.word	0x08003310
 80029c4:	0800331a 	.word	0x0800331a
 80029c8:	00000000 	.word	0x00000000
 80029cc:	0800274f 	.word	0x0800274f
 80029d0:	08003316 	.word	0x08003316

080029d4 <_printf_common>:
 80029d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029d8:	4616      	mov	r6, r2
 80029da:	4699      	mov	r9, r3
 80029dc:	688a      	ldr	r2, [r1, #8]
 80029de:	690b      	ldr	r3, [r1, #16]
 80029e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80029e4:	4293      	cmp	r3, r2
 80029e6:	bfb8      	it	lt
 80029e8:	4613      	movlt	r3, r2
 80029ea:	6033      	str	r3, [r6, #0]
 80029ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80029f0:	4607      	mov	r7, r0
 80029f2:	460c      	mov	r4, r1
 80029f4:	b10a      	cbz	r2, 80029fa <_printf_common+0x26>
 80029f6:	3301      	adds	r3, #1
 80029f8:	6033      	str	r3, [r6, #0]
 80029fa:	6823      	ldr	r3, [r4, #0]
 80029fc:	0699      	lsls	r1, r3, #26
 80029fe:	bf42      	ittt	mi
 8002a00:	6833      	ldrmi	r3, [r6, #0]
 8002a02:	3302      	addmi	r3, #2
 8002a04:	6033      	strmi	r3, [r6, #0]
 8002a06:	6825      	ldr	r5, [r4, #0]
 8002a08:	f015 0506 	ands.w	r5, r5, #6
 8002a0c:	d106      	bne.n	8002a1c <_printf_common+0x48>
 8002a0e:	f104 0a19 	add.w	sl, r4, #25
 8002a12:	68e3      	ldr	r3, [r4, #12]
 8002a14:	6832      	ldr	r2, [r6, #0]
 8002a16:	1a9b      	subs	r3, r3, r2
 8002a18:	42ab      	cmp	r3, r5
 8002a1a:	dc26      	bgt.n	8002a6a <_printf_common+0x96>
 8002a1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a20:	1e13      	subs	r3, r2, #0
 8002a22:	6822      	ldr	r2, [r4, #0]
 8002a24:	bf18      	it	ne
 8002a26:	2301      	movne	r3, #1
 8002a28:	0692      	lsls	r2, r2, #26
 8002a2a:	d42b      	bmi.n	8002a84 <_printf_common+0xb0>
 8002a2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a30:	4649      	mov	r1, r9
 8002a32:	4638      	mov	r0, r7
 8002a34:	47c0      	blx	r8
 8002a36:	3001      	adds	r0, #1
 8002a38:	d01e      	beq.n	8002a78 <_printf_common+0xa4>
 8002a3a:	6823      	ldr	r3, [r4, #0]
 8002a3c:	68e5      	ldr	r5, [r4, #12]
 8002a3e:	6832      	ldr	r2, [r6, #0]
 8002a40:	f003 0306 	and.w	r3, r3, #6
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	bf08      	it	eq
 8002a48:	1aad      	subeq	r5, r5, r2
 8002a4a:	68a3      	ldr	r3, [r4, #8]
 8002a4c:	6922      	ldr	r2, [r4, #16]
 8002a4e:	bf0c      	ite	eq
 8002a50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a54:	2500      	movne	r5, #0
 8002a56:	4293      	cmp	r3, r2
 8002a58:	bfc4      	itt	gt
 8002a5a:	1a9b      	subgt	r3, r3, r2
 8002a5c:	18ed      	addgt	r5, r5, r3
 8002a5e:	2600      	movs	r6, #0
 8002a60:	341a      	adds	r4, #26
 8002a62:	42b5      	cmp	r5, r6
 8002a64:	d11a      	bne.n	8002a9c <_printf_common+0xc8>
 8002a66:	2000      	movs	r0, #0
 8002a68:	e008      	b.n	8002a7c <_printf_common+0xa8>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	4652      	mov	r2, sl
 8002a6e:	4649      	mov	r1, r9
 8002a70:	4638      	mov	r0, r7
 8002a72:	47c0      	blx	r8
 8002a74:	3001      	adds	r0, #1
 8002a76:	d103      	bne.n	8002a80 <_printf_common+0xac>
 8002a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a80:	3501      	adds	r5, #1
 8002a82:	e7c6      	b.n	8002a12 <_printf_common+0x3e>
 8002a84:	18e1      	adds	r1, r4, r3
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	2030      	movs	r0, #48	; 0x30
 8002a8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a8e:	4422      	add	r2, r4
 8002a90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a98:	3302      	adds	r3, #2
 8002a9a:	e7c7      	b.n	8002a2c <_printf_common+0x58>
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	4622      	mov	r2, r4
 8002aa0:	4649      	mov	r1, r9
 8002aa2:	4638      	mov	r0, r7
 8002aa4:	47c0      	blx	r8
 8002aa6:	3001      	adds	r0, #1
 8002aa8:	d0e6      	beq.n	8002a78 <_printf_common+0xa4>
 8002aaa:	3601      	adds	r6, #1
 8002aac:	e7d9      	b.n	8002a62 <_printf_common+0x8e>
	...

08002ab0 <_printf_i>:
 8002ab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ab4:	460c      	mov	r4, r1
 8002ab6:	4691      	mov	r9, r2
 8002ab8:	7e27      	ldrb	r7, [r4, #24]
 8002aba:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002abc:	2f78      	cmp	r7, #120	; 0x78
 8002abe:	4680      	mov	r8, r0
 8002ac0:	469a      	mov	sl, r3
 8002ac2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ac6:	d807      	bhi.n	8002ad8 <_printf_i+0x28>
 8002ac8:	2f62      	cmp	r7, #98	; 0x62
 8002aca:	d80a      	bhi.n	8002ae2 <_printf_i+0x32>
 8002acc:	2f00      	cmp	r7, #0
 8002ace:	f000 80d8 	beq.w	8002c82 <_printf_i+0x1d2>
 8002ad2:	2f58      	cmp	r7, #88	; 0x58
 8002ad4:	f000 80a3 	beq.w	8002c1e <_printf_i+0x16e>
 8002ad8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002adc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ae0:	e03a      	b.n	8002b58 <_printf_i+0xa8>
 8002ae2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002ae6:	2b15      	cmp	r3, #21
 8002ae8:	d8f6      	bhi.n	8002ad8 <_printf_i+0x28>
 8002aea:	a001      	add	r0, pc, #4	; (adr r0, 8002af0 <_printf_i+0x40>)
 8002aec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002af0:	08002b49 	.word	0x08002b49
 8002af4:	08002b5d 	.word	0x08002b5d
 8002af8:	08002ad9 	.word	0x08002ad9
 8002afc:	08002ad9 	.word	0x08002ad9
 8002b00:	08002ad9 	.word	0x08002ad9
 8002b04:	08002ad9 	.word	0x08002ad9
 8002b08:	08002b5d 	.word	0x08002b5d
 8002b0c:	08002ad9 	.word	0x08002ad9
 8002b10:	08002ad9 	.word	0x08002ad9
 8002b14:	08002ad9 	.word	0x08002ad9
 8002b18:	08002ad9 	.word	0x08002ad9
 8002b1c:	08002c69 	.word	0x08002c69
 8002b20:	08002b8d 	.word	0x08002b8d
 8002b24:	08002c4b 	.word	0x08002c4b
 8002b28:	08002ad9 	.word	0x08002ad9
 8002b2c:	08002ad9 	.word	0x08002ad9
 8002b30:	08002c8b 	.word	0x08002c8b
 8002b34:	08002ad9 	.word	0x08002ad9
 8002b38:	08002b8d 	.word	0x08002b8d
 8002b3c:	08002ad9 	.word	0x08002ad9
 8002b40:	08002ad9 	.word	0x08002ad9
 8002b44:	08002c53 	.word	0x08002c53
 8002b48:	680b      	ldr	r3, [r1, #0]
 8002b4a:	1d1a      	adds	r2, r3, #4
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	600a      	str	r2, [r1, #0]
 8002b50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002b54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0a3      	b.n	8002ca4 <_printf_i+0x1f4>
 8002b5c:	6825      	ldr	r5, [r4, #0]
 8002b5e:	6808      	ldr	r0, [r1, #0]
 8002b60:	062e      	lsls	r6, r5, #24
 8002b62:	f100 0304 	add.w	r3, r0, #4
 8002b66:	d50a      	bpl.n	8002b7e <_printf_i+0xce>
 8002b68:	6805      	ldr	r5, [r0, #0]
 8002b6a:	600b      	str	r3, [r1, #0]
 8002b6c:	2d00      	cmp	r5, #0
 8002b6e:	da03      	bge.n	8002b78 <_printf_i+0xc8>
 8002b70:	232d      	movs	r3, #45	; 0x2d
 8002b72:	426d      	negs	r5, r5
 8002b74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b78:	485e      	ldr	r0, [pc, #376]	; (8002cf4 <_printf_i+0x244>)
 8002b7a:	230a      	movs	r3, #10
 8002b7c:	e019      	b.n	8002bb2 <_printf_i+0x102>
 8002b7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002b82:	6805      	ldr	r5, [r0, #0]
 8002b84:	600b      	str	r3, [r1, #0]
 8002b86:	bf18      	it	ne
 8002b88:	b22d      	sxthne	r5, r5
 8002b8a:	e7ef      	b.n	8002b6c <_printf_i+0xbc>
 8002b8c:	680b      	ldr	r3, [r1, #0]
 8002b8e:	6825      	ldr	r5, [r4, #0]
 8002b90:	1d18      	adds	r0, r3, #4
 8002b92:	6008      	str	r0, [r1, #0]
 8002b94:	0628      	lsls	r0, r5, #24
 8002b96:	d501      	bpl.n	8002b9c <_printf_i+0xec>
 8002b98:	681d      	ldr	r5, [r3, #0]
 8002b9a:	e002      	b.n	8002ba2 <_printf_i+0xf2>
 8002b9c:	0669      	lsls	r1, r5, #25
 8002b9e:	d5fb      	bpl.n	8002b98 <_printf_i+0xe8>
 8002ba0:	881d      	ldrh	r5, [r3, #0]
 8002ba2:	4854      	ldr	r0, [pc, #336]	; (8002cf4 <_printf_i+0x244>)
 8002ba4:	2f6f      	cmp	r7, #111	; 0x6f
 8002ba6:	bf0c      	ite	eq
 8002ba8:	2308      	moveq	r3, #8
 8002baa:	230a      	movne	r3, #10
 8002bac:	2100      	movs	r1, #0
 8002bae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002bb2:	6866      	ldr	r6, [r4, #4]
 8002bb4:	60a6      	str	r6, [r4, #8]
 8002bb6:	2e00      	cmp	r6, #0
 8002bb8:	bfa2      	ittt	ge
 8002bba:	6821      	ldrge	r1, [r4, #0]
 8002bbc:	f021 0104 	bicge.w	r1, r1, #4
 8002bc0:	6021      	strge	r1, [r4, #0]
 8002bc2:	b90d      	cbnz	r5, 8002bc8 <_printf_i+0x118>
 8002bc4:	2e00      	cmp	r6, #0
 8002bc6:	d04d      	beq.n	8002c64 <_printf_i+0x1b4>
 8002bc8:	4616      	mov	r6, r2
 8002bca:	fbb5 f1f3 	udiv	r1, r5, r3
 8002bce:	fb03 5711 	mls	r7, r3, r1, r5
 8002bd2:	5dc7      	ldrb	r7, [r0, r7]
 8002bd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002bd8:	462f      	mov	r7, r5
 8002bda:	42bb      	cmp	r3, r7
 8002bdc:	460d      	mov	r5, r1
 8002bde:	d9f4      	bls.n	8002bca <_printf_i+0x11a>
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d10b      	bne.n	8002bfc <_printf_i+0x14c>
 8002be4:	6823      	ldr	r3, [r4, #0]
 8002be6:	07df      	lsls	r7, r3, #31
 8002be8:	d508      	bpl.n	8002bfc <_printf_i+0x14c>
 8002bea:	6923      	ldr	r3, [r4, #16]
 8002bec:	6861      	ldr	r1, [r4, #4]
 8002bee:	4299      	cmp	r1, r3
 8002bf0:	bfde      	ittt	le
 8002bf2:	2330      	movle	r3, #48	; 0x30
 8002bf4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002bf8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8002bfc:	1b92      	subs	r2, r2, r6
 8002bfe:	6122      	str	r2, [r4, #16]
 8002c00:	f8cd a000 	str.w	sl, [sp]
 8002c04:	464b      	mov	r3, r9
 8002c06:	aa03      	add	r2, sp, #12
 8002c08:	4621      	mov	r1, r4
 8002c0a:	4640      	mov	r0, r8
 8002c0c:	f7ff fee2 	bl	80029d4 <_printf_common>
 8002c10:	3001      	adds	r0, #1
 8002c12:	d14c      	bne.n	8002cae <_printf_i+0x1fe>
 8002c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c18:	b004      	add	sp, #16
 8002c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c1e:	4835      	ldr	r0, [pc, #212]	; (8002cf4 <_printf_i+0x244>)
 8002c20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002c24:	6823      	ldr	r3, [r4, #0]
 8002c26:	680e      	ldr	r6, [r1, #0]
 8002c28:	061f      	lsls	r7, r3, #24
 8002c2a:	f856 5b04 	ldr.w	r5, [r6], #4
 8002c2e:	600e      	str	r6, [r1, #0]
 8002c30:	d514      	bpl.n	8002c5c <_printf_i+0x1ac>
 8002c32:	07d9      	lsls	r1, r3, #31
 8002c34:	bf44      	itt	mi
 8002c36:	f043 0320 	orrmi.w	r3, r3, #32
 8002c3a:	6023      	strmi	r3, [r4, #0]
 8002c3c:	b91d      	cbnz	r5, 8002c46 <_printf_i+0x196>
 8002c3e:	6823      	ldr	r3, [r4, #0]
 8002c40:	f023 0320 	bic.w	r3, r3, #32
 8002c44:	6023      	str	r3, [r4, #0]
 8002c46:	2310      	movs	r3, #16
 8002c48:	e7b0      	b.n	8002bac <_printf_i+0xfc>
 8002c4a:	6823      	ldr	r3, [r4, #0]
 8002c4c:	f043 0320 	orr.w	r3, r3, #32
 8002c50:	6023      	str	r3, [r4, #0]
 8002c52:	2378      	movs	r3, #120	; 0x78
 8002c54:	4828      	ldr	r0, [pc, #160]	; (8002cf8 <_printf_i+0x248>)
 8002c56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002c5a:	e7e3      	b.n	8002c24 <_printf_i+0x174>
 8002c5c:	065e      	lsls	r6, r3, #25
 8002c5e:	bf48      	it	mi
 8002c60:	b2ad      	uxthmi	r5, r5
 8002c62:	e7e6      	b.n	8002c32 <_printf_i+0x182>
 8002c64:	4616      	mov	r6, r2
 8002c66:	e7bb      	b.n	8002be0 <_printf_i+0x130>
 8002c68:	680b      	ldr	r3, [r1, #0]
 8002c6a:	6826      	ldr	r6, [r4, #0]
 8002c6c:	6960      	ldr	r0, [r4, #20]
 8002c6e:	1d1d      	adds	r5, r3, #4
 8002c70:	600d      	str	r5, [r1, #0]
 8002c72:	0635      	lsls	r5, r6, #24
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	d501      	bpl.n	8002c7c <_printf_i+0x1cc>
 8002c78:	6018      	str	r0, [r3, #0]
 8002c7a:	e002      	b.n	8002c82 <_printf_i+0x1d2>
 8002c7c:	0671      	lsls	r1, r6, #25
 8002c7e:	d5fb      	bpl.n	8002c78 <_printf_i+0x1c8>
 8002c80:	8018      	strh	r0, [r3, #0]
 8002c82:	2300      	movs	r3, #0
 8002c84:	6123      	str	r3, [r4, #16]
 8002c86:	4616      	mov	r6, r2
 8002c88:	e7ba      	b.n	8002c00 <_printf_i+0x150>
 8002c8a:	680b      	ldr	r3, [r1, #0]
 8002c8c:	1d1a      	adds	r2, r3, #4
 8002c8e:	600a      	str	r2, [r1, #0]
 8002c90:	681e      	ldr	r6, [r3, #0]
 8002c92:	6862      	ldr	r2, [r4, #4]
 8002c94:	2100      	movs	r1, #0
 8002c96:	4630      	mov	r0, r6
 8002c98:	f7fd fad2 	bl	8000240 <memchr>
 8002c9c:	b108      	cbz	r0, 8002ca2 <_printf_i+0x1f2>
 8002c9e:	1b80      	subs	r0, r0, r6
 8002ca0:	6060      	str	r0, [r4, #4]
 8002ca2:	6863      	ldr	r3, [r4, #4]
 8002ca4:	6123      	str	r3, [r4, #16]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cac:	e7a8      	b.n	8002c00 <_printf_i+0x150>
 8002cae:	6923      	ldr	r3, [r4, #16]
 8002cb0:	4632      	mov	r2, r6
 8002cb2:	4649      	mov	r1, r9
 8002cb4:	4640      	mov	r0, r8
 8002cb6:	47d0      	blx	sl
 8002cb8:	3001      	adds	r0, #1
 8002cba:	d0ab      	beq.n	8002c14 <_printf_i+0x164>
 8002cbc:	6823      	ldr	r3, [r4, #0]
 8002cbe:	079b      	lsls	r3, r3, #30
 8002cc0:	d413      	bmi.n	8002cea <_printf_i+0x23a>
 8002cc2:	68e0      	ldr	r0, [r4, #12]
 8002cc4:	9b03      	ldr	r3, [sp, #12]
 8002cc6:	4298      	cmp	r0, r3
 8002cc8:	bfb8      	it	lt
 8002cca:	4618      	movlt	r0, r3
 8002ccc:	e7a4      	b.n	8002c18 <_printf_i+0x168>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	4632      	mov	r2, r6
 8002cd2:	4649      	mov	r1, r9
 8002cd4:	4640      	mov	r0, r8
 8002cd6:	47d0      	blx	sl
 8002cd8:	3001      	adds	r0, #1
 8002cda:	d09b      	beq.n	8002c14 <_printf_i+0x164>
 8002cdc:	3501      	adds	r5, #1
 8002cde:	68e3      	ldr	r3, [r4, #12]
 8002ce0:	9903      	ldr	r1, [sp, #12]
 8002ce2:	1a5b      	subs	r3, r3, r1
 8002ce4:	42ab      	cmp	r3, r5
 8002ce6:	dcf2      	bgt.n	8002cce <_printf_i+0x21e>
 8002ce8:	e7eb      	b.n	8002cc2 <_printf_i+0x212>
 8002cea:	2500      	movs	r5, #0
 8002cec:	f104 0619 	add.w	r6, r4, #25
 8002cf0:	e7f5      	b.n	8002cde <_printf_i+0x22e>
 8002cf2:	bf00      	nop
 8002cf4:	08003321 	.word	0x08003321
 8002cf8:	08003332 	.word	0x08003332

08002cfc <_putc_r>:
 8002cfc:	b570      	push	{r4, r5, r6, lr}
 8002cfe:	460d      	mov	r5, r1
 8002d00:	4614      	mov	r4, r2
 8002d02:	4606      	mov	r6, r0
 8002d04:	b118      	cbz	r0, 8002d0e <_putc_r+0x12>
 8002d06:	6983      	ldr	r3, [r0, #24]
 8002d08:	b90b      	cbnz	r3, 8002d0e <_putc_r+0x12>
 8002d0a:	f7ff f8c7 	bl	8001e9c <__sinit>
 8002d0e:	4b1c      	ldr	r3, [pc, #112]	; (8002d80 <_putc_r+0x84>)
 8002d10:	429c      	cmp	r4, r3
 8002d12:	d124      	bne.n	8002d5e <_putc_r+0x62>
 8002d14:	6874      	ldr	r4, [r6, #4]
 8002d16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d18:	07d8      	lsls	r0, r3, #31
 8002d1a:	d405      	bmi.n	8002d28 <_putc_r+0x2c>
 8002d1c:	89a3      	ldrh	r3, [r4, #12]
 8002d1e:	0599      	lsls	r1, r3, #22
 8002d20:	d402      	bmi.n	8002d28 <_putc_r+0x2c>
 8002d22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d24:	f7ff f9ab 	bl	800207e <__retarget_lock_acquire_recursive>
 8002d28:	68a3      	ldr	r3, [r4, #8]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	60a3      	str	r3, [r4, #8]
 8002d30:	da05      	bge.n	8002d3e <_putc_r+0x42>
 8002d32:	69a2      	ldr	r2, [r4, #24]
 8002d34:	4293      	cmp	r3, r2
 8002d36:	db1c      	blt.n	8002d72 <_putc_r+0x76>
 8002d38:	b2eb      	uxtb	r3, r5
 8002d3a:	2b0a      	cmp	r3, #10
 8002d3c:	d019      	beq.n	8002d72 <_putc_r+0x76>
 8002d3e:	6823      	ldr	r3, [r4, #0]
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	6022      	str	r2, [r4, #0]
 8002d44:	701d      	strb	r5, [r3, #0]
 8002d46:	b2ed      	uxtb	r5, r5
 8002d48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d4a:	07da      	lsls	r2, r3, #31
 8002d4c:	d405      	bmi.n	8002d5a <_putc_r+0x5e>
 8002d4e:	89a3      	ldrh	r3, [r4, #12]
 8002d50:	059b      	lsls	r3, r3, #22
 8002d52:	d402      	bmi.n	8002d5a <_putc_r+0x5e>
 8002d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d56:	f7ff f993 	bl	8002080 <__retarget_lock_release_recursive>
 8002d5a:	4628      	mov	r0, r5
 8002d5c:	bd70      	pop	{r4, r5, r6, pc}
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <_putc_r+0x88>)
 8002d60:	429c      	cmp	r4, r3
 8002d62:	d101      	bne.n	8002d68 <_putc_r+0x6c>
 8002d64:	68b4      	ldr	r4, [r6, #8]
 8002d66:	e7d6      	b.n	8002d16 <_putc_r+0x1a>
 8002d68:	4b07      	ldr	r3, [pc, #28]	; (8002d88 <_putc_r+0x8c>)
 8002d6a:	429c      	cmp	r4, r3
 8002d6c:	bf08      	it	eq
 8002d6e:	68f4      	ldreq	r4, [r6, #12]
 8002d70:	e7d1      	b.n	8002d16 <_putc_r+0x1a>
 8002d72:	4629      	mov	r1, r5
 8002d74:	4622      	mov	r2, r4
 8002d76:	4630      	mov	r0, r6
 8002d78:	f7ff fb2e 	bl	80023d8 <__swbuf_r>
 8002d7c:	4605      	mov	r5, r0
 8002d7e:	e7e3      	b.n	8002d48 <_putc_r+0x4c>
 8002d80:	080032cc 	.word	0x080032cc
 8002d84:	080032ec 	.word	0x080032ec
 8002d88:	080032ac 	.word	0x080032ac

08002d8c <_read_r>:
 8002d8c:	b538      	push	{r3, r4, r5, lr}
 8002d8e:	4d07      	ldr	r5, [pc, #28]	; (8002dac <_read_r+0x20>)
 8002d90:	4604      	mov	r4, r0
 8002d92:	4608      	mov	r0, r1
 8002d94:	4611      	mov	r1, r2
 8002d96:	2200      	movs	r2, #0
 8002d98:	602a      	str	r2, [r5, #0]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	f7fd fdba 	bl	8000914 <_read>
 8002da0:	1c43      	adds	r3, r0, #1
 8002da2:	d102      	bne.n	8002daa <_read_r+0x1e>
 8002da4:	682b      	ldr	r3, [r5, #0]
 8002da6:	b103      	cbz	r3, 8002daa <_read_r+0x1e>
 8002da8:	6023      	str	r3, [r4, #0]
 8002daa:	bd38      	pop	{r3, r4, r5, pc}
 8002dac:	200001a8 	.word	0x200001a8

08002db0 <__srget_r>:
 8002db0:	b538      	push	{r3, r4, r5, lr}
 8002db2:	460c      	mov	r4, r1
 8002db4:	4605      	mov	r5, r0
 8002db6:	b118      	cbz	r0, 8002dc0 <__srget_r+0x10>
 8002db8:	6983      	ldr	r3, [r0, #24]
 8002dba:	b90b      	cbnz	r3, 8002dc0 <__srget_r+0x10>
 8002dbc:	f7ff f86e 	bl	8001e9c <__sinit>
 8002dc0:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <__srget_r+0x4c>)
 8002dc2:	429c      	cmp	r4, r3
 8002dc4:	d10d      	bne.n	8002de2 <__srget_r+0x32>
 8002dc6:	686c      	ldr	r4, [r5, #4]
 8002dc8:	4621      	mov	r1, r4
 8002dca:	4628      	mov	r0, r5
 8002dcc:	f000 f848 	bl	8002e60 <__srefill_r>
 8002dd0:	b988      	cbnz	r0, 8002df6 <__srget_r+0x46>
 8002dd2:	6863      	ldr	r3, [r4, #4]
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	6063      	str	r3, [r4, #4]
 8002dd8:	6823      	ldr	r3, [r4, #0]
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	6022      	str	r2, [r4, #0]
 8002dde:	7818      	ldrb	r0, [r3, #0]
 8002de0:	bd38      	pop	{r3, r4, r5, pc}
 8002de2:	4b07      	ldr	r3, [pc, #28]	; (8002e00 <__srget_r+0x50>)
 8002de4:	429c      	cmp	r4, r3
 8002de6:	d101      	bne.n	8002dec <__srget_r+0x3c>
 8002de8:	68ac      	ldr	r4, [r5, #8]
 8002dea:	e7ed      	b.n	8002dc8 <__srget_r+0x18>
 8002dec:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <__srget_r+0x54>)
 8002dee:	429c      	cmp	r4, r3
 8002df0:	bf08      	it	eq
 8002df2:	68ec      	ldreq	r4, [r5, #12]
 8002df4:	e7e8      	b.n	8002dc8 <__srget_r+0x18>
 8002df6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dfa:	e7f1      	b.n	8002de0 <__srget_r+0x30>
 8002dfc:	080032cc 	.word	0x080032cc
 8002e00:	080032ec 	.word	0x080032ec
 8002e04:	080032ac 	.word	0x080032ac

08002e08 <_fstat_r>:
 8002e08:	b538      	push	{r3, r4, r5, lr}
 8002e0a:	4d07      	ldr	r5, [pc, #28]	; (8002e28 <_fstat_r+0x20>)
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	4604      	mov	r4, r0
 8002e10:	4608      	mov	r0, r1
 8002e12:	4611      	mov	r1, r2
 8002e14:	602b      	str	r3, [r5, #0]
 8002e16:	f000 f8b5 	bl	8002f84 <_fstat>
 8002e1a:	1c43      	adds	r3, r0, #1
 8002e1c:	d102      	bne.n	8002e24 <_fstat_r+0x1c>
 8002e1e:	682b      	ldr	r3, [r5, #0]
 8002e20:	b103      	cbz	r3, 8002e24 <_fstat_r+0x1c>
 8002e22:	6023      	str	r3, [r4, #0]
 8002e24:	bd38      	pop	{r3, r4, r5, pc}
 8002e26:	bf00      	nop
 8002e28:	200001a8 	.word	0x200001a8

08002e2c <_isatty_r>:
 8002e2c:	b538      	push	{r3, r4, r5, lr}
 8002e2e:	4d06      	ldr	r5, [pc, #24]	; (8002e48 <_isatty_r+0x1c>)
 8002e30:	2300      	movs	r3, #0
 8002e32:	4604      	mov	r4, r0
 8002e34:	4608      	mov	r0, r1
 8002e36:	602b      	str	r3, [r5, #0]
 8002e38:	f000 f8ac 	bl	8002f94 <_isatty>
 8002e3c:	1c43      	adds	r3, r0, #1
 8002e3e:	d102      	bne.n	8002e46 <_isatty_r+0x1a>
 8002e40:	682b      	ldr	r3, [r5, #0]
 8002e42:	b103      	cbz	r3, 8002e46 <_isatty_r+0x1a>
 8002e44:	6023      	str	r3, [r4, #0]
 8002e46:	bd38      	pop	{r3, r4, r5, pc}
 8002e48:	200001a8 	.word	0x200001a8

08002e4c <lflush>:
 8002e4c:	8983      	ldrh	r3, [r0, #12]
 8002e4e:	f003 0309 	and.w	r3, r3, #9
 8002e52:	2b09      	cmp	r3, #9
 8002e54:	d101      	bne.n	8002e5a <lflush+0xe>
 8002e56:	f7fe bfb7 	b.w	8001dc8 <fflush>
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	4770      	bx	lr
	...

08002e60 <__srefill_r>:
 8002e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e62:	460c      	mov	r4, r1
 8002e64:	4605      	mov	r5, r0
 8002e66:	b118      	cbz	r0, 8002e70 <__srefill_r+0x10>
 8002e68:	6983      	ldr	r3, [r0, #24]
 8002e6a:	b90b      	cbnz	r3, 8002e70 <__srefill_r+0x10>
 8002e6c:	f7ff f816 	bl	8001e9c <__sinit>
 8002e70:	4b3b      	ldr	r3, [pc, #236]	; (8002f60 <__srefill_r+0x100>)
 8002e72:	429c      	cmp	r4, r3
 8002e74:	d10a      	bne.n	8002e8c <__srefill_r+0x2c>
 8002e76:	686c      	ldr	r4, [r5, #4]
 8002e78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	6063      	str	r3, [r4, #4]
 8002e80:	89a3      	ldrh	r3, [r4, #12]
 8002e82:	069e      	lsls	r6, r3, #26
 8002e84:	d50c      	bpl.n	8002ea0 <__srefill_r+0x40>
 8002e86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e8a:	e066      	b.n	8002f5a <__srefill_r+0xfa>
 8002e8c:	4b35      	ldr	r3, [pc, #212]	; (8002f64 <__srefill_r+0x104>)
 8002e8e:	429c      	cmp	r4, r3
 8002e90:	d101      	bne.n	8002e96 <__srefill_r+0x36>
 8002e92:	68ac      	ldr	r4, [r5, #8]
 8002e94:	e7f0      	b.n	8002e78 <__srefill_r+0x18>
 8002e96:	4b34      	ldr	r3, [pc, #208]	; (8002f68 <__srefill_r+0x108>)
 8002e98:	429c      	cmp	r4, r3
 8002e9a:	bf08      	it	eq
 8002e9c:	68ec      	ldreq	r4, [r5, #12]
 8002e9e:	e7eb      	b.n	8002e78 <__srefill_r+0x18>
 8002ea0:	0758      	lsls	r0, r3, #29
 8002ea2:	d448      	bmi.n	8002f36 <__srefill_r+0xd6>
 8002ea4:	06d9      	lsls	r1, r3, #27
 8002ea6:	d405      	bmi.n	8002eb4 <__srefill_r+0x54>
 8002ea8:	2309      	movs	r3, #9
 8002eaa:	602b      	str	r3, [r5, #0]
 8002eac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002eb0:	81a3      	strh	r3, [r4, #12]
 8002eb2:	e7e8      	b.n	8002e86 <__srefill_r+0x26>
 8002eb4:	071a      	lsls	r2, r3, #28
 8002eb6:	d50b      	bpl.n	8002ed0 <__srefill_r+0x70>
 8002eb8:	4621      	mov	r1, r4
 8002eba:	4628      	mov	r0, r5
 8002ebc:	f7fe ff48 	bl	8001d50 <_fflush_r>
 8002ec0:	2800      	cmp	r0, #0
 8002ec2:	d1e0      	bne.n	8002e86 <__srefill_r+0x26>
 8002ec4:	89a3      	ldrh	r3, [r4, #12]
 8002ec6:	60a0      	str	r0, [r4, #8]
 8002ec8:	f023 0308 	bic.w	r3, r3, #8
 8002ecc:	81a3      	strh	r3, [r4, #12]
 8002ece:	61a0      	str	r0, [r4, #24]
 8002ed0:	89a3      	ldrh	r3, [r4, #12]
 8002ed2:	f043 0304 	orr.w	r3, r3, #4
 8002ed6:	81a3      	strh	r3, [r4, #12]
 8002ed8:	6923      	ldr	r3, [r4, #16]
 8002eda:	b91b      	cbnz	r3, 8002ee4 <__srefill_r+0x84>
 8002edc:	4621      	mov	r1, r4
 8002ede:	4628      	mov	r0, r5
 8002ee0:	f7ff fbd2 	bl	8002688 <__smakebuf_r>
 8002ee4:	89a6      	ldrh	r6, [r4, #12]
 8002ee6:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8002eea:	07b3      	lsls	r3, r6, #30
 8002eec:	d00f      	beq.n	8002f0e <__srefill_r+0xae>
 8002eee:	2301      	movs	r3, #1
 8002ef0:	81a3      	strh	r3, [r4, #12]
 8002ef2:	4b1e      	ldr	r3, [pc, #120]	; (8002f6c <__srefill_r+0x10c>)
 8002ef4:	491e      	ldr	r1, [pc, #120]	; (8002f70 <__srefill_r+0x110>)
 8002ef6:	6818      	ldr	r0, [r3, #0]
 8002ef8:	f006 0609 	and.w	r6, r6, #9
 8002efc:	f7ff f84c 	bl	8001f98 <_fwalk>
 8002f00:	2e09      	cmp	r6, #9
 8002f02:	81a7      	strh	r7, [r4, #12]
 8002f04:	d103      	bne.n	8002f0e <__srefill_r+0xae>
 8002f06:	4621      	mov	r1, r4
 8002f08:	4628      	mov	r0, r5
 8002f0a:	f7fe fe9b 	bl	8001c44 <__sflush_r>
 8002f0e:	6922      	ldr	r2, [r4, #16]
 8002f10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002f12:	6963      	ldr	r3, [r4, #20]
 8002f14:	6a21      	ldr	r1, [r4, #32]
 8002f16:	6022      	str	r2, [r4, #0]
 8002f18:	4628      	mov	r0, r5
 8002f1a:	47b0      	blx	r6
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	6060      	str	r0, [r4, #4]
 8002f20:	dc1c      	bgt.n	8002f5c <__srefill_r+0xfc>
 8002f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f26:	bf17      	itett	ne
 8002f28:	2200      	movne	r2, #0
 8002f2a:	f043 0320 	orreq.w	r3, r3, #32
 8002f2e:	6062      	strne	r2, [r4, #4]
 8002f30:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8002f34:	e7bc      	b.n	8002eb0 <__srefill_r+0x50>
 8002f36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f38:	2900      	cmp	r1, #0
 8002f3a:	d0cd      	beq.n	8002ed8 <__srefill_r+0x78>
 8002f3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f40:	4299      	cmp	r1, r3
 8002f42:	d002      	beq.n	8002f4a <__srefill_r+0xea>
 8002f44:	4628      	mov	r0, r5
 8002f46:	f7ff f8a5 	bl	8002094 <_free_r>
 8002f4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f4c:	6063      	str	r3, [r4, #4]
 8002f4e:	2000      	movs	r0, #0
 8002f50:	6360      	str	r0, [r4, #52]	; 0x34
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0c0      	beq.n	8002ed8 <__srefill_r+0x78>
 8002f56:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002f58:	6023      	str	r3, [r4, #0]
 8002f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	e7fc      	b.n	8002f5a <__srefill_r+0xfa>
 8002f60:	080032cc 	.word	0x080032cc
 8002f64:	080032ec 	.word	0x080032ec
 8002f68:	080032ac 	.word	0x080032ac
 8002f6c:	0800330c 	.word	0x0800330c
 8002f70:	08002e4d 	.word	0x08002e4d

08002f74 <_close>:
 8002f74:	4b02      	ldr	r3, [pc, #8]	; (8002f80 <_close+0xc>)
 8002f76:	2258      	movs	r2, #88	; 0x58
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f7e:	4770      	bx	lr
 8002f80:	200001a8 	.word	0x200001a8

08002f84 <_fstat>:
 8002f84:	4b02      	ldr	r3, [pc, #8]	; (8002f90 <_fstat+0xc>)
 8002f86:	2258      	movs	r2, #88	; 0x58
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f8e:	4770      	bx	lr
 8002f90:	200001a8 	.word	0x200001a8

08002f94 <_isatty>:
 8002f94:	4b02      	ldr	r3, [pc, #8]	; (8002fa0 <_isatty+0xc>)
 8002f96:	2258      	movs	r2, #88	; 0x58
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	200001a8 	.word	0x200001a8

08002fa4 <_lseek>:
 8002fa4:	4b02      	ldr	r3, [pc, #8]	; (8002fb0 <_lseek+0xc>)
 8002fa6:	2258      	movs	r2, #88	; 0x58
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fae:	4770      	bx	lr
 8002fb0:	200001a8 	.word	0x200001a8

08002fb4 <_sbrk>:
 8002fb4:	4b04      	ldr	r3, [pc, #16]	; (8002fc8 <_sbrk+0x14>)
 8002fb6:	6819      	ldr	r1, [r3, #0]
 8002fb8:	4602      	mov	r2, r0
 8002fba:	b909      	cbnz	r1, 8002fc0 <_sbrk+0xc>
 8002fbc:	4903      	ldr	r1, [pc, #12]	; (8002fcc <_sbrk+0x18>)
 8002fbe:	6019      	str	r1, [r3, #0]
 8002fc0:	6818      	ldr	r0, [r3, #0]
 8002fc2:	4402      	add	r2, r0
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	4770      	bx	lr
 8002fc8:	20000094 	.word	0x20000094
 8002fcc:	200001b0 	.word	0x200001b0

08002fd0 <_init>:
 8002fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fd2:	bf00      	nop
 8002fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fd6:	bc08      	pop	{r3}
 8002fd8:	469e      	mov	lr, r3
 8002fda:	4770      	bx	lr

08002fdc <_fini>:
 8002fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fde:	bf00      	nop
 8002fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fe2:	bc08      	pop	{r3}
 8002fe4:	469e      	mov	lr, r3
 8002fe6:	4770      	bx	lr
